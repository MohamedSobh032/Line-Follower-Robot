
Project_MazeSolver_CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a84  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000c18  08000c18  00010c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c20  08000c20  00010c28  2**0
                  CONTENTS
  4 .ARM          00000000  08000c20  08000c20  00010c28  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c20  08000c28  00010c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c20  08000c20  00010c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c24  08000c24  00010c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000000  08000c28  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000c28  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010c28  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010c58  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001e68  00000000  00000000  00010c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000845  00000000  00000000  00012b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000280  00000000  00000000  00013348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001c3  00000000  00000000  000135c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001712  00000000  00000000  0001378b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000de0  00000000  00000000  00014e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007129  00000000  00000000  00015c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000088c  00000000  00000000  0001cda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0001d634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000c00 	.word	0x08000c00

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000c00 	.word	0x08000c00

080001d4 <MADC_vInit>:
/* Func. Name: MADC_vInit                            */
/* i/p arguments: nothing                            */
/* o/p arguments: nothing                            */
/* Desc. : This API Initializes General ADC Settings */
/*****************************************************/
void MADC_vInit(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	/* Set the Prescaler of the ADC CLK */
	WRITE_BITS(ADC_CCR, MADC_CLOCK_PRESCALER, TWO_BITS, MADC_CCR_ADCPRE0_BIT);
 80001d8:	4b2a      	ldr	r3, [pc, #168]	; (8000284 <MADC_vInit+0xb0>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a29      	ldr	r2, [pc, #164]	; (8000284 <MADC_vInit+0xb0>)
 80001de:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80001e2:	6013      	str	r3, [r2, #0]

	/* Set the Data Allignment */
	if (MADC_DATA_ALLIGNMENT == MADC_ALLIGN_RIGHT) { CLR_BIT(ADC1->CR2, MADC_CR2_ALLIGN_BIT); }
 80001e4:	4b28      	ldr	r3, [pc, #160]	; (8000288 <MADC_vInit+0xb4>)
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	4a27      	ldr	r2, [pc, #156]	; (8000288 <MADC_vInit+0xb4>)
 80001ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001ee:	6093      	str	r3, [r2, #8]
	else 										   { SET_BIT(ADC1->CR2, MADC_CR2_ALLIGN_BIT); }

	/* Set the Resolution of the ADC */
	WRITE_BITS(ADC1->CR1, MADC_RESOLUTION, TWO_BITS, MADC_CR1_RES0_BIT);
 80001f0:	4b25      	ldr	r3, [pc, #148]	; (8000288 <MADC_vInit+0xb4>)
 80001f2:	685b      	ldr	r3, [r3, #4]
 80001f4:	4a24      	ldr	r2, [pc, #144]	; (8000288 <MADC_vInit+0xb4>)
 80001f6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80001fa:	6053      	str	r3, [r2, #4]
	#if MADC_SCANNING_MODE == MADC_SINGLE_CONVERSION_MODE
		CLR_BIT(ADC1->CR1, MADC_CR1_SCAN_BIT);
		/* Clear the EOC After Each Regular Conversion (BY DEFAULT IT IS SINGLE CONVERSION) */
		CLR_BIT(ADC1->CR2, MADC_CR2_EOCS_BIT);
	#elif MADC_SCANNING_MODE == MADC_SCAN_CONVERSION_MODE
		SET_BIT(ADC1->CR1, MADC_CR1_SCAN_BIT);
 80001fc:	4b22      	ldr	r3, [pc, #136]	; (8000288 <MADC_vInit+0xb4>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	4a21      	ldr	r2, [pc, #132]	; (8000288 <MADC_vInit+0xb4>)
 8000202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000206:	6053      	str	r3, [r2, #4]
		if (MADC_END_OF_CONVERSION_LOCATION == MADC_EOC_REGULAR_SEQUENCE_END) { CLR_BIT(ADC1->CR2, MADC_CR2_EOCS_BIT); }
		else																  { SET_BIT(ADC1->CR2, MADC_CR2_EOCS_BIT); }
 8000208:	4b1f      	ldr	r3, [pc, #124]	; (8000288 <MADC_vInit+0xb4>)
 800020a:	689b      	ldr	r3, [r3, #8]
 800020c:	4a1e      	ldr	r2, [pc, #120]	; (8000288 <MADC_vInit+0xb4>)
 800020e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000212:	6093      	str	r3, [r2, #8]
	/* Set the Conversion Mode of Regular Group */
	#if MADC_REGULAR_CONVERSION_MODE == MADC_NORMAL_CONVERSION
		CLR_BIT(ADC1->CR1, MADC_CR1_DISCEN_BIT);
		CLR_BIT(ADC1->CR2, MADC_CR2_CONT_BIT);
	#elif  MADC_REGULAR_CONVERSION_MODE == MADC_CONTINUOUS_CONVERSION
		CLR_BIT(ADC1->CR1, MADC_CR1_DISCEN_BIT);
 8000214:	4b1c      	ldr	r3, [pc, #112]	; (8000288 <MADC_vInit+0xb4>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	4a1b      	ldr	r2, [pc, #108]	; (8000288 <MADC_vInit+0xb4>)
 800021a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800021e:	6053      	str	r3, [r2, #4]
		SET_BIT(ADC1->CR2, MADC_CR2_CONT_BIT);
 8000220:	4b19      	ldr	r3, [pc, #100]	; (8000288 <MADC_vInit+0xb4>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	4a18      	ldr	r2, [pc, #96]	; (8000288 <MADC_vInit+0xb4>)
 8000226:	f043 0302 	orr.w	r3, r3, #2
 800022a:	6093      	str	r3, [r2, #8]

	#if MADC_REGULAR_EXTERNAL_TRIGGER == MADC_ENABLE
		WRITE_BITS(ADC1->CR2, MADC_REGULAR_EXTERNAL_TRIGGER_EDGE, TWO_BITS, MADC_CR2_EXTEN0_BIT);
		WRITE_BITS(ADC1->CR2, MADC_REGULAR_EXTERNAL_TRIGGER_SOURCE, FOUR_BITS, MADC_CR2_EXTSEL0_BIT);
	#else
		WRITE_BITS(ADC1->CR2, MADC_TRIG_EDGE_DISABLED, TWO_BITS, MADC_CR2_EXTEN0_BIT);
 800022c:	4b16      	ldr	r3, [pc, #88]	; (8000288 <MADC_vInit+0xb4>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	4a15      	ldr	r2, [pc, #84]	; (8000288 <MADC_vInit+0xb4>)
 8000232:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000236:	6093      	str	r3, [r2, #8]
	/* Set the Conversion Mode of Injected Group */
	#if MADC_INJECTED_CONVERSION_MODE == MADC_NORMAL_CONVERSION
		CLR_BIT(ADC1->CR1, MADC_CR1_JDISCEN_BIT);
		CLR_BIT(ADC1->CR2, MADC_CR2_CONT_BIT);
	#elif  MADC_INJECTED_CONVERSION_MODE == MADC_CONTINUOUS_CONVERSION
		CLR_BIT(ADC1->CR1, MADC_CR1_JDISCEN_BIT);
 8000238:	4b13      	ldr	r3, [pc, #76]	; (8000288 <MADC_vInit+0xb4>)
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	4a12      	ldr	r2, [pc, #72]	; (8000288 <MADC_vInit+0xb4>)
 800023e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000242:	6053      	str	r3, [r2, #4]
		SET_BIT(ADC1->CR2, MADC_CR2_CONT_BIT);
 8000244:	4b10      	ldr	r3, [pc, #64]	; (8000288 <MADC_vInit+0xb4>)
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	4a0f      	ldr	r2, [pc, #60]	; (8000288 <MADC_vInit+0xb4>)
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	6093      	str	r3, [r2, #8]

	#if MADC_INJECTED_EXTERNAL_TRIGGER == MADC_ENABLE
		WRITE_BITS(ADC1->CR2, MADC_INJECTED_EXTERNAL_TRIGGER_EDGE, TWO_BITS, MADC_CR2_JEXTEN0_BIT);
		WRITE_BITS(ADC1->CR2, MADC_INJECTED_EXTERNAL_TRIGGER_SOURCE, FOUR_BITS, MADC_CR2_JEXTSEL0_BIT);
	#else
		WRITE_BITS(ADC1->CR2, MADC_TRIG_EDGE_DISABLED, TWO_BITS, MADC_CR2_JEXTEN0_BIT);
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <MADC_vInit+0xb4>)
 8000252:	689b      	ldr	r3, [r3, #8]
 8000254:	4a0c      	ldr	r2, [pc, #48]	; (8000288 <MADC_vInit+0xb4>)
 8000256:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800025a:	6093      	str	r3, [r2, #8]
	#endif

	/* Set Automatic Injection */
	if (MADC_AUTOMATIC_INJECTION == MADC_ENABLE) { SET_BIT(ADC1->CR1, MADC_CR1_JAUTO_BIT); }
	else										 { CLR_BIT(ADC1->CR1, MADC_CR1_JAUTO_BIT); }
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <MADC_vInit+0xb4>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	4a09      	ldr	r2, [pc, #36]	; (8000288 <MADC_vInit+0xb4>)
 8000262:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000266:	6053      	str	r3, [r2, #4]
	/**************************************************************************************************/

	/* Set ADC to Power Down Mode */
	CLR_BIT(ADC1->CR2, MADC_CR2_ADON_BIT);
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <MADC_vInit+0xb4>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	4a06      	ldr	r2, [pc, #24]	; (8000288 <MADC_vInit+0xb4>)
 800026e:	f023 0301 	bic.w	r3, r3, #1
 8000272:	6093      	str	r3, [r2, #8]

	/* Clear Status Register */
	ADC1->SR = 0;
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <MADC_vInit+0xb4>)
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
}
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	40015004 	.word	0x40015004
 8000288:	40012000 	.word	0x40012000

0800028c <MADC_vEnable>:
/* Func. Name: MADC_vEnable          */
/* i/p arguments: nothing            */
/* o/p arguments: nothing            */
/* Desc. : This API Wakes up the ADC */
/*************************************/
void MADC_vEnable(u8 Copy_u8EnableReg, u8 Copy_u8EnableInj) {
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	460a      	mov	r2, r1
 8000296:	71fb      	strb	r3, [r7, #7]
 8000298:	4613      	mov	r3, r2
 800029a:	71bb      	strb	r3, [r7, #6]
	/* Wake up ADC from Power Down Mode */
	SET_BIT(ADC1->CR2, MADC_CR2_ADON_BIT);
 800029c:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <MADC_vEnable+0x4c>)
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <MADC_vEnable+0x4c>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6093      	str	r3, [r2, #8]
	if (Copy_u8EnableReg == MADC_ENABLE) {
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d105      	bne.n	80002ba <MADC_vEnable+0x2e>
		SET_BIT(ADC1->CR2, MADC_CR2_SWSTART_BIT);
 80002ae:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <MADC_vEnable+0x4c>)
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	4a09      	ldr	r2, [pc, #36]	; (80002d8 <MADC_vEnable+0x4c>)
 80002b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002b8:	6093      	str	r3, [r2, #8]
	}
	if (Copy_u8EnableInj == MADC_ENABLE) {
 80002ba:	79bb      	ldrb	r3, [r7, #6]
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d105      	bne.n	80002cc <MADC_vEnable+0x40>
		SET_BIT(ADC1->CR2, MADC_CR2_JSWSTART_BIT);
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <MADC_vEnable+0x4c>)
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <MADC_vEnable+0x4c>)
 80002c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002ca:	6093      	str	r3, [r2, #8]
	}
}
 80002cc:	bf00      	nop
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	40012000 	.word	0x40012000

080002dc <MADC_vSetRegularDMA>:
/* Func. Name: MADC_vSetRegularDMA                                */
/* i/p arguments: Copy_u8Status: MADC_<Status>                    */
/* o/p arguments: Address of the Data Register                    */
/* Desc. : This API Enables Requesting DMA (STREAM 0 - CHANNEL 0) */
/******************************************************************/
volatile u32* MADC_vSetRegularDMA(u8 Copy_u8Status) {
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
	if (Copy_u8Status == MADC_ENABLE) {
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d10f      	bne.n	800030c <MADC_vSetRegularDMA+0x30>
		SET_BIT(ADC1->CR2, MADC_CR2_DMA_BIT);
 80002ec:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <MADC_vSetRegularDMA+0x4c>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <MADC_vSetRegularDMA+0x4c>)
 80002f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f6:	6093      	str	r3, [r2, #8]
		SET_BIT(ADC1->CR2, MADC_CR2_DDS_BIT);
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <MADC_vSetRegularDMA+0x4c>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <MADC_vSetRegularDMA+0x4c>)
 80002fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000302:	6093      	str	r3, [r2, #8]
		ADC1->SR = 0;
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <MADC_vSetRegularDMA+0x4c>)
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	e005      	b.n	8000318 <MADC_vSetRegularDMA+0x3c>
	}
	else { CLR_BIT(ADC1->CR2, MADC_CR2_DMA_BIT); }
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <MADC_vSetRegularDMA+0x4c>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	4a05      	ldr	r2, [pc, #20]	; (8000328 <MADC_vSetRegularDMA+0x4c>)
 8000312:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000316:	6093      	str	r3, [r2, #8]
	return &(ADC1->DR);
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <MADC_vSetRegularDMA+0x50>)
}
 800031a:	4618      	mov	r0, r3
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40012000 	.word	0x40012000
 800032c:	4001204c 	.word	0x4001204c

08000330 <MADC_vSetSamplingTime>:
/* i/p arguments: Channel: MADC_CHANNEL<Number>		 	                */
/* i/p arguments: Copy_u8SampleTime: MADC_SAMPLING_CYCLES_<Number>      */
/* o/p arguments: nothing                                               */
/* Desc. : This API Sets the Sample Time in Clocks for Selected Channel */
/************************************************************************/
void MADC_vSetSamplingTime(MADC_CHANNEL Channel, u8 Copy_u8SampleTime) {
 8000330:	b4b0      	push	{r4, r5, r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	460a      	mov	r2, r1
 800033a:	71fb      	strb	r3, [r7, #7]
 800033c:	4613      	mov	r3, r2
 800033e:	71bb      	strb	r3, [r7, #6]
	WRITE_BITS(ADC1->SMPR[1 - (Channel % 10)], Copy_u8SampleTime, THREE_BITS, ((Channel % 10) * 3));
 8000340:	79b8      	ldrb	r0, [r7, #6]
 8000342:	79fa      	ldrb	r2, [r7, #7]
 8000344:	4b27      	ldr	r3, [pc, #156]	; (80003e4 <MADC_vSetSamplingTime+0xb4>)
 8000346:	fba3 1302 	umull	r1, r3, r3, r2
 800034a:	08d9      	lsrs	r1, r3, #3
 800034c:	460b      	mov	r3, r1
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	440b      	add	r3, r1
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	1ad3      	subs	r3, r2, r3
 8000356:	b2db      	uxtb	r3, r3
 8000358:	461a      	mov	r2, r3
 800035a:	4613      	mov	r3, r2
 800035c:	005b      	lsls	r3, r3, #1
 800035e:	4413      	add	r3, r2
 8000360:	fa00 f303 	lsl.w	r3, r0, r3
 8000364:	461d      	mov	r5, r3
 8000366:	4820      	ldr	r0, [pc, #128]	; (80003e8 <MADC_vSetSamplingTime+0xb8>)
 8000368:	79fa      	ldrb	r2, [r7, #7]
 800036a:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <MADC_vSetSamplingTime+0xb4>)
 800036c:	fba3 1302 	umull	r1, r3, r3, r2
 8000370:	08d9      	lsrs	r1, r3, #3
 8000372:	460b      	mov	r3, r1
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	440b      	add	r3, r1
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	1ad3      	subs	r3, r2, r3
 800037c:	b2db      	uxtb	r3, r3
 800037e:	f1c3 0301 	rsb	r3, r3, #1
 8000382:	3302      	adds	r3, #2
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	4403      	add	r3, r0
 8000388:	6858      	ldr	r0, [r3, #4]
 800038a:	79fa      	ldrb	r2, [r7, #7]
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <MADC_vSetSamplingTime+0xb4>)
 800038e:	fba3 1302 	umull	r1, r3, r3, r2
 8000392:	08d9      	lsrs	r1, r3, #3
 8000394:	460b      	mov	r3, r1
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	440b      	add	r3, r1
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	1ad3      	subs	r3, r2, r3
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	461a      	mov	r2, r3
 80003a2:	4613      	mov	r3, r2
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	4413      	add	r3, r2
 80003a8:	2207      	movs	r2, #7
 80003aa:	fa02 f303 	lsl.w	r3, r2, r3
 80003ae:	43db      	mvns	r3, r3
 80003b0:	4018      	ands	r0, r3
 80003b2:	4c0d      	ldr	r4, [pc, #52]	; (80003e8 <MADC_vSetSamplingTime+0xb8>)
 80003b4:	79fa      	ldrb	r2, [r7, #7]
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <MADC_vSetSamplingTime+0xb4>)
 80003b8:	fba3 1302 	umull	r1, r3, r3, r2
 80003bc:	08d9      	lsrs	r1, r3, #3
 80003be:	460b      	mov	r3, r1
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	440b      	add	r3, r1
 80003c4:	005b      	lsls	r3, r3, #1
 80003c6:	1ad3      	subs	r3, r2, r3
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	f1c3 0301 	rsb	r3, r3, #1
 80003ce:	ea45 0200 	orr.w	r2, r5, r0
 80003d2:	3302      	adds	r3, #2
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	4423      	add	r3, r4
 80003d8:	605a      	str	r2, [r3, #4]
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bcb0      	pop	{r4, r5, r7}
 80003e2:	4770      	bx	lr
 80003e4:	cccccccd 	.word	0xcccccccd
 80003e8:	40012000 	.word	0x40012000

080003ec <MADC_vSetNumberOfConversions>:
/* i/p arguments: Copy_u8Group: MADC_<Group>_GROUP			    */
/* i/p arguments: Copy_u8Conversions: MADC_<Number>_CONVERSIONS	*/
/* o/p arguments: nothing                                       */
/* Desc. : This API Sets the Number of Channels to be Converted */
/****************************************************************/
void MADC_vSetNumberOfConversions(u8 Copy_u8Group, u8 Copy_u8Conversions) {
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	460a      	mov	r2, r1
 80003f6:	71fb      	strb	r3, [r7, #7]
 80003f8:	4613      	mov	r3, r2
 80003fa:	71bb      	strb	r3, [r7, #6]
	if (Copy_u8Group == MADC_REGULAR_GROUP) { WRITE_BITS(ADC1->SQR[0], Copy_u8Conversions, FOUR_BITS, MADC_SQR1_L0_BIT);  }
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d10a      	bne.n	8000418 <MADC_vSetNumberOfConversions+0x2c>
 8000402:	79bb      	ldrb	r3, [r7, #6]
 8000404:	051b      	lsls	r3, r3, #20
 8000406:	4619      	mov	r1, r3
 8000408:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <MADC_vSetNumberOfConversions+0x4c>)
 800040a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800040c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000410:	4a09      	ldr	r2, [pc, #36]	; (8000438 <MADC_vSetNumberOfConversions+0x4c>)
 8000412:	430b      	orrs	r3, r1
 8000414:	62d3      	str	r3, [r2, #44]	; 0x2c
	else 									{ WRITE_BITS(ADC1->JSQR  , Copy_u8Conversions, TWO_BITS , MADC_JSQR_JL0_BIT); }
}
 8000416:	e009      	b.n	800042c <MADC_vSetNumberOfConversions+0x40>
	else 									{ WRITE_BITS(ADC1->JSQR  , Copy_u8Conversions, TWO_BITS , MADC_JSQR_JL0_BIT); }
 8000418:	79bb      	ldrb	r3, [r7, #6]
 800041a:	051b      	lsls	r3, r3, #20
 800041c:	4619      	mov	r1, r3
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <MADC_vSetNumberOfConversions+0x4c>)
 8000420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000422:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000426:	4a04      	ldr	r2, [pc, #16]	; (8000438 <MADC_vSetNumberOfConversions+0x4c>)
 8000428:	430b      	orrs	r3, r1
 800042a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	40012000 	.word	0x40012000

0800043c <MADC_vSetSequence>:
/* i/p arguments: Channel: MADC_CHANNEL<Number>		 	                            */
/* i/p arguments: Copy_u8SeqNumber: MADC_SEQUENCE_<Number>	                        */
/* o/p arguments: nothing                                                           */
/* Desc. : This API Sets the Selected Channel to be in a Specific Sequence Location */
/************************************************************************************/
void MADC_vSetSequence(u8 Copy_u8Group, MADC_CHANNEL Channel, u8 Copy_u8SeqNumber) {
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]
 8000446:	460b      	mov	r3, r1
 8000448:	71bb      	strb	r3, [r7, #6]
 800044a:	4613      	mov	r3, r2
 800044c:	717b      	strb	r3, [r7, #5]
	if (Copy_u8Group == MADC_REGULAR_GROUP) {
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d150      	bne.n	80004f6 <MADC_vSetSequence+0xba>
		if (Copy_u8SeqNumber <= MADC_SEQUENCE_6) {
 8000454:	797b      	ldrb	r3, [r7, #5]
 8000456:	2b05      	cmp	r3, #5
 8000458:	d816      	bhi.n	8000488 <MADC_vSetSequence+0x4c>
			WRITE_BITS(ADC1->SQR[2], Channel, FIVE_BITS, Copy_u8SeqNumber * 5);
 800045a:	79b9      	ldrb	r1, [r7, #6]
 800045c:	797a      	ldrb	r2, [r7, #5]
 800045e:	4613      	mov	r3, r2
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	4413      	add	r3, r2
 8000464:	fa01 f303 	lsl.w	r3, r1, r3
 8000468:	4618      	mov	r0, r3
 800046a:	4b31      	ldr	r3, [pc, #196]	; (8000530 <MADC_vSetSequence+0xf4>)
 800046c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800046e:	797a      	ldrb	r2, [r7, #5]
 8000470:	4613      	mov	r3, r2
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	4413      	add	r3, r2
 8000476:	221f      	movs	r2, #31
 8000478:	fa02 f303 	lsl.w	r3, r2, r3
 800047c:	43db      	mvns	r3, r3
 800047e:	400b      	ands	r3, r1
 8000480:	4a2b      	ldr	r2, [pc, #172]	; (8000530 <MADC_vSetSequence+0xf4>)
 8000482:	4303      	orrs	r3, r0
 8000484:	6353      	str	r3, [r2, #52]	; 0x34
			WRITE_BITS(ADC1->SQR[0], Channel, FIVE_BITS, (Copy_u8SeqNumber - MADC_SEQUENCE_13) * 5);
		}
	} else {
		WRITE_BITS(ADC1->JSQR, Channel, FIVE_BITS, Copy_u8SeqNumber * 5);
	}
}
 8000486:	e04c      	b.n	8000522 <MADC_vSetSequence+0xe6>
		} else if (Copy_u8SeqNumber <= MADC_SEQUENCE_12) {
 8000488:	797b      	ldrb	r3, [r7, #5]
 800048a:	2b0b      	cmp	r3, #11
 800048c:	d818      	bhi.n	80004c0 <MADC_vSetSequence+0x84>
			WRITE_BITS(ADC1->SQR[1], Channel, FIVE_BITS, (Copy_u8SeqNumber - MADC_SEQUENCE_7) * 5);
 800048e:	79b9      	ldrb	r1, [r7, #6]
 8000490:	797b      	ldrb	r3, [r7, #5]
 8000492:	1f9a      	subs	r2, r3, #6
 8000494:	4613      	mov	r3, r2
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	4413      	add	r3, r2
 800049a:	fa01 f303 	lsl.w	r3, r1, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	4b23      	ldr	r3, [pc, #140]	; (8000530 <MADC_vSetSequence+0xf4>)
 80004a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80004a4:	797b      	ldrb	r3, [r7, #5]
 80004a6:	1f9a      	subs	r2, r3, #6
 80004a8:	4613      	mov	r3, r2
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	4413      	add	r3, r2
 80004ae:	221f      	movs	r2, #31
 80004b0:	fa02 f303 	lsl.w	r3, r2, r3
 80004b4:	43db      	mvns	r3, r3
 80004b6:	400b      	ands	r3, r1
 80004b8:	4a1d      	ldr	r2, [pc, #116]	; (8000530 <MADC_vSetSequence+0xf4>)
 80004ba:	4303      	orrs	r3, r0
 80004bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004be:	e030      	b.n	8000522 <MADC_vSetSequence+0xe6>
			WRITE_BITS(ADC1->SQR[0], Channel, FIVE_BITS, (Copy_u8SeqNumber - MADC_SEQUENCE_13) * 5);
 80004c0:	79b9      	ldrb	r1, [r7, #6]
 80004c2:	797b      	ldrb	r3, [r7, #5]
 80004c4:	f1a3 020c 	sub.w	r2, r3, #12
 80004c8:	4613      	mov	r3, r2
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	4413      	add	r3, r2
 80004ce:	fa01 f303 	lsl.w	r3, r1, r3
 80004d2:	4618      	mov	r0, r3
 80004d4:	4b16      	ldr	r3, [pc, #88]	; (8000530 <MADC_vSetSequence+0xf4>)
 80004d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80004d8:	797b      	ldrb	r3, [r7, #5]
 80004da:	f1a3 020c 	sub.w	r2, r3, #12
 80004de:	4613      	mov	r3, r2
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	4413      	add	r3, r2
 80004e4:	221f      	movs	r2, #31
 80004e6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ea:	43db      	mvns	r3, r3
 80004ec:	400b      	ands	r3, r1
 80004ee:	4a10      	ldr	r2, [pc, #64]	; (8000530 <MADC_vSetSequence+0xf4>)
 80004f0:	4303      	orrs	r3, r0
 80004f2:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80004f4:	e015      	b.n	8000522 <MADC_vSetSequence+0xe6>
		WRITE_BITS(ADC1->JSQR, Channel, FIVE_BITS, Copy_u8SeqNumber * 5);
 80004f6:	79b9      	ldrb	r1, [r7, #6]
 80004f8:	797a      	ldrb	r2, [r7, #5]
 80004fa:	4613      	mov	r3, r2
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	4413      	add	r3, r2
 8000500:	fa01 f303 	lsl.w	r3, r1, r3
 8000504:	4618      	mov	r0, r3
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <MADC_vSetSequence+0xf4>)
 8000508:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800050a:	797a      	ldrb	r2, [r7, #5]
 800050c:	4613      	mov	r3, r2
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	4413      	add	r3, r2
 8000512:	221f      	movs	r2, #31
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	43db      	mvns	r3, r3
 800051a:	400b      	ands	r3, r1
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <MADC_vSetSequence+0xf4>)
 800051e:	4303      	orrs	r3, r0
 8000520:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40012000 	.word	0x40012000

08000534 <MDMA_vDirectInit>:
/* i/p arguments: Copy_u8Stream: MDMA_STREAM_[Stream Number] */
/* i/p arguments: A_InitStruct: Initialization Structure     */
/* o/p arguments: nothing              						 */
/* Desc. : This API Initializes DMA to Direct Mode  		 */
/*************************************************************/
void MDMA_vDirectInit(DMA_t* DMAx, u8 Copy_u8Stream, MDMA_DirectInitType* A_InitStruct) {
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	460b      	mov	r3, r1
 800053e:	607a      	str	r2, [r7, #4]
 8000540:	72fb      	strb	r3, [r7, #11]
	/* Disable DMA Stream */
	CLR_BIT(DMAx->S[Copy_u8Stream].CR, MDMA_SxCR_EN_BIT);
 8000542:	7afa      	ldrb	r2, [r7, #11]
 8000544:	68f9      	ldr	r1, [r7, #12]
 8000546:	4613      	mov	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	4413      	add	r3, r2
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	440b      	add	r3, r1
 8000550:	3310      	adds	r3, #16
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	7afa      	ldrb	r2, [r7, #11]
 8000556:	f023 0101 	bic.w	r1, r3, #1
 800055a:	68f8      	ldr	r0, [r7, #12]
 800055c:	4613      	mov	r3, r2
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	4413      	add	r3, r2
 8000562:	00db      	lsls	r3, r3, #3
 8000564:	4403      	add	r3, r0
 8000566:	3310      	adds	r3, #16
 8000568:	6019      	str	r1, [r3, #0]
	/* Enable Direct Mode */
	CLR_BIT(DMAx->S[Copy_u8Stream].FCR, MDMA_SxFCR_DMDIS_BIT);
 800056a:	7afa      	ldrb	r2, [r7, #11]
 800056c:	68f9      	ldr	r1, [r7, #12]
 800056e:	4613      	mov	r3, r2
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	4413      	add	r3, r2
 8000574:	00db      	lsls	r3, r3, #3
 8000576:	440b      	add	r3, r1
 8000578:	3324      	adds	r3, #36	; 0x24
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	7afa      	ldrb	r2, [r7, #11]
 800057e:	f023 0104 	bic.w	r1, r3, #4
 8000582:	68f8      	ldr	r0, [r7, #12]
 8000584:	4613      	mov	r3, r2
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	4413      	add	r3, r2
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	4403      	add	r3, r0
 800058e:	3324      	adds	r3, #36	; 0x24
 8000590:	6019      	str	r1, [r3, #0]
	/* Set the Transfer Direction */
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_InitStruct->TransferDirection, TWO_BITS, MDMA_SxCR_DIR0_BIT);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	785b      	ldrb	r3, [r3, #1]
 8000596:	019b      	lsls	r3, r3, #6
 8000598:	4618      	mov	r0, r3
 800059a:	7afa      	ldrb	r2, [r7, #11]
 800059c:	68f9      	ldr	r1, [r7, #12]
 800059e:	4613      	mov	r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4413      	add	r3, r2
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	440b      	add	r3, r1
 80005a8:	3310      	adds	r3, #16
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80005b0:	7afa      	ldrb	r2, [r7, #11]
 80005b2:	ea40 0103 	orr.w	r1, r0, r3
 80005b6:	68f8      	ldr	r0, [r7, #12]
 80005b8:	4613      	mov	r3, r2
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	4413      	add	r3, r2
 80005be:	00db      	lsls	r3, r3, #3
 80005c0:	4403      	add	r3, r0
 80005c2:	3310      	adds	r3, #16
 80005c4:	6019      	str	r1, [r3, #0]
	/* Set the Peripheral Mode */
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_InitStruct->PINC, ONE_BIT, MDMA_SxCR_PINC_BIT);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	78db      	ldrb	r3, [r3, #3]
 80005ca:	025b      	lsls	r3, r3, #9
 80005cc:	4618      	mov	r0, r3
 80005ce:	7afa      	ldrb	r2, [r7, #11]
 80005d0:	68f9      	ldr	r1, [r7, #12]
 80005d2:	4613      	mov	r3, r2
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	4413      	add	r3, r2
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	440b      	add	r3, r1
 80005dc:	3310      	adds	r3, #16
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80005e4:	7afa      	ldrb	r2, [r7, #11]
 80005e6:	ea40 0103 	orr.w	r1, r0, r3
 80005ea:	68f8      	ldr	r0, [r7, #12]
 80005ec:	4613      	mov	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	4413      	add	r3, r2
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	4403      	add	r3, r0
 80005f6:	3310      	adds	r3, #16
 80005f8:	6019      	str	r1, [r3, #0]
	/* Set the Memory Mode */
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_InitStruct->MINC, ONE_BIT, MDMA_SxCR_MINC_BIT);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	791b      	ldrb	r3, [r3, #4]
 80005fe:	029b      	lsls	r3, r3, #10
 8000600:	4618      	mov	r0, r3
 8000602:	7afa      	ldrb	r2, [r7, #11]
 8000604:	68f9      	ldr	r1, [r7, #12]
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	440b      	add	r3, r1
 8000610:	3310      	adds	r3, #16
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000618:	7afa      	ldrb	r2, [r7, #11]
 800061a:	ea40 0103 	orr.w	r1, r0, r3
 800061e:	68f8      	ldr	r0, [r7, #12]
 8000620:	4613      	mov	r3, r2
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	4413      	add	r3, r2
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	4403      	add	r3, r0
 800062a:	3310      	adds	r3, #16
 800062c:	6019      	str	r1, [r3, #0]
	/* Set the Priority */
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_InitStruct->PriorityLevel, TWO_BITS, MDMA_SxCR_PL0_BIT);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	795b      	ldrb	r3, [r3, #5]
 8000632:	041b      	lsls	r3, r3, #16
 8000634:	4618      	mov	r0, r3
 8000636:	7afa      	ldrb	r2, [r7, #11]
 8000638:	68f9      	ldr	r1, [r7, #12]
 800063a:	4613      	mov	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4413      	add	r3, r2
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	440b      	add	r3, r1
 8000644:	3310      	adds	r3, #16
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800064c:	7afa      	ldrb	r2, [r7, #11]
 800064e:	ea40 0103 	orr.w	r1, r0, r3
 8000652:	68f8      	ldr	r0, [r7, #12]
 8000654:	4613      	mov	r3, r2
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	00db      	lsls	r3, r3, #3
 800065c:	4403      	add	r3, r0
 800065e:	3310      	adds	r3, #16
 8000660:	6019      	str	r1, [r3, #0]
	/* Set the Channel */
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_InitStruct->Channel, THREE_BITS, MDMA_SxCR_CHSEL0_BIT);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	799b      	ldrb	r3, [r3, #6]
 8000666:	065b      	lsls	r3, r3, #25
 8000668:	4618      	mov	r0, r3
 800066a:	7afa      	ldrb	r2, [r7, #11]
 800066c:	68f9      	ldr	r1, [r7, #12]
 800066e:	4613      	mov	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	4413      	add	r3, r2
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	440b      	add	r3, r1
 8000678:	3310      	adds	r3, #16
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8000680:	7afa      	ldrb	r2, [r7, #11]
 8000682:	ea40 0103 	orr.w	r1, r0, r3
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	4613      	mov	r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	4413      	add	r3, r2
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	4403      	add	r3, r0
 8000692:	3310      	adds	r3, #16
 8000694:	6019      	str	r1, [r3, #0]
	/* Set Peripheral Control */
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_InitStruct->PeripheralControl, ONE_BIT, MDMA_SxCR_PFCTRL_BIT);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	015b      	lsls	r3, r3, #5
 800069c:	4618      	mov	r0, r3
 800069e:	7afa      	ldrb	r2, [r7, #11]
 80006a0:	68f9      	ldr	r1, [r7, #12]
 80006a2:	4613      	mov	r3, r2
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	4413      	add	r3, r2
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	440b      	add	r3, r1
 80006ac:	3310      	adds	r3, #16
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 0320 	bic.w	r3, r3, #32
 80006b4:	7afa      	ldrb	r2, [r7, #11]
 80006b6:	ea40 0103 	orr.w	r1, r0, r3
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	4613      	mov	r3, r2
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	4413      	add	r3, r2
 80006c2:	00db      	lsls	r3, r3, #3
 80006c4:	4403      	add	r3, r0
 80006c6:	3310      	adds	r3, #16
 80006c8:	6019      	str	r1, [r3, #0]
	/* Set Circular Mode */
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_InitStruct->Circ, ONE_BIT, MDMA_SxCR_CIRC_BIT);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	789b      	ldrb	r3, [r3, #2]
 80006ce:	021b      	lsls	r3, r3, #8
 80006d0:	4618      	mov	r0, r3
 80006d2:	7afa      	ldrb	r2, [r7, #11]
 80006d4:	68f9      	ldr	r1, [r7, #12]
 80006d6:	4613      	mov	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	4413      	add	r3, r2
 80006dc:	00db      	lsls	r3, r3, #3
 80006de:	440b      	add	r3, r1
 80006e0:	3310      	adds	r3, #16
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006e8:	7afa      	ldrb	r2, [r7, #11]
 80006ea:	ea40 0103 	orr.w	r1, r0, r3
 80006ee:	68f8      	ldr	r0, [r7, #12]
 80006f0:	4613      	mov	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	00db      	lsls	r3, r3, #3
 80006f8:	4403      	add	r3, r0
 80006fa:	3310      	adds	r3, #16
 80006fc:	6019      	str	r1, [r3, #0]
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <MDMA_vStart>:
/* i/p arguments: Copy_u8Stream: MDMA_STREAM_<Stream Number> */
/* i/p arguments: A_TransferStruct: Transfer Structure       */
/* o/p arguments: nothing              						 */
/* Desc. : This API Starts Data Transfer Through DMAx        */
/*************************************************************/
void MDMA_vStart(DMA_t* DMAx, u8 Copy_u8Stream, MDMA_TransferStruct* A_TransferStruct) {
 800070a:	b480      	push	{r7}
 800070c:	b085      	sub	sp, #20
 800070e:	af00      	add	r7, sp, #0
 8000710:	60f8      	str	r0, [r7, #12]
 8000712:	460b      	mov	r3, r1
 8000714:	607a      	str	r2, [r7, #4]
 8000716:	72fb      	strb	r3, [r7, #11]
	/* Set the Data Sizes of the Memory and Peripheral */
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_TransferStruct->Size, TWO_BITS, MDMA_SxCR_PSIZE0_BIT);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7a9b      	ldrb	r3, [r3, #10]
 800071c:	02db      	lsls	r3, r3, #11
 800071e:	4618      	mov	r0, r3
 8000720:	7afa      	ldrb	r2, [r7, #11]
 8000722:	68f9      	ldr	r1, [r7, #12]
 8000724:	4613      	mov	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	4413      	add	r3, r2
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	440b      	add	r3, r1
 800072e:	3310      	adds	r3, #16
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000736:	7afa      	ldrb	r2, [r7, #11]
 8000738:	ea40 0103 	orr.w	r1, r0, r3
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	4613      	mov	r3, r2
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	4413      	add	r3, r2
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	4403      	add	r3, r0
 8000748:	3310      	adds	r3, #16
 800074a:	6019      	str	r1, [r3, #0]
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_TransferStruct->Size, TWO_BITS, MDMA_SxCR_MSIZE0_BIT);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7a9b      	ldrb	r3, [r3, #10]
 8000750:	035b      	lsls	r3, r3, #13
 8000752:	4618      	mov	r0, r3
 8000754:	7afa      	ldrb	r2, [r7, #11]
 8000756:	68f9      	ldr	r1, [r7, #12]
 8000758:	4613      	mov	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4413      	add	r3, r2
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	440b      	add	r3, r1
 8000762:	3310      	adds	r3, #16
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800076a:	7afa      	ldrb	r2, [r7, #11]
 800076c:	ea40 0103 	orr.w	r1, r0, r3
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	4613      	mov	r3, r2
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4413      	add	r3, r2
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	4403      	add	r3, r0
 800077c:	3310      	adds	r3, #16
 800077e:	6019      	str	r1, [r3, #0]
	/* Set the Source & Destination & Length */
	DMAx->S[Copy_u8Stream].PAR = (u32)A_TransferStruct->SrcAddr;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	7afb      	ldrb	r3, [r7, #11]
 8000786:	4610      	mov	r0, r2
 8000788:	68f9      	ldr	r1, [r7, #12]
 800078a:	1c5a      	adds	r2, r3, #1
 800078c:	4613      	mov	r3, r2
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	4413      	add	r3, r2
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	440b      	add	r3, r1
 8000796:	6018      	str	r0, [r3, #0]
	DMAx->S[Copy_u8Stream].M0AR = (u32)A_TransferStruct->DstAddr;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	685a      	ldr	r2, [r3, #4]
 800079c:	7afb      	ldrb	r3, [r7, #11]
 800079e:	4610      	mov	r0, r2
 80007a0:	68f9      	ldr	r1, [r7, #12]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	4613      	mov	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	4413      	add	r3, r2
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	440b      	add	r3, r1
 80007ae:	3304      	adds	r3, #4
 80007b0:	6018      	str	r0, [r3, #0]
	DMAx->S[Copy_u8Stream].NDTR = A_TransferStruct->Length;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	891b      	ldrh	r3, [r3, #8]
 80007b6:	7afa      	ldrb	r2, [r7, #11]
 80007b8:	4618      	mov	r0, r3
 80007ba:	68f9      	ldr	r1, [r7, #12]
 80007bc:	4613      	mov	r3, r2
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	4413      	add	r3, r2
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	440b      	add	r3, r1
 80007c6:	3314      	adds	r3, #20
 80007c8:	6018      	str	r0, [r3, #0]
	/* DMA Start */
	SET_BIT(DMAx->S[Copy_u8Stream].CR, MDMA_SxCR_EN_BIT);
 80007ca:	7afa      	ldrb	r2, [r7, #11]
 80007cc:	68f9      	ldr	r1, [r7, #12]
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	440b      	add	r3, r1
 80007d8:	3310      	adds	r3, #16
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	7afa      	ldrb	r2, [r7, #11]
 80007de:	f043 0101 	orr.w	r1, r3, #1
 80007e2:	68f8      	ldr	r0, [r7, #12]
 80007e4:	4613      	mov	r3, r2
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	4403      	add	r3, r0
 80007ee:	3310      	adds	r3, #16
 80007f0:	6019      	str	r1, [r3, #0]
}
 80007f2:	bf00      	nop
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <MGPIO_vSetPinMode>:
/* i/p arguments: Copy_GPIOPin: MGPIO_PIN00 --> MGPIO_PIN15       */
/* i/p arguments: Copy_u8Mode: MGPIO_MODE_<Mode Type>             */
/* o/p arguments: nothing                                         */
/* Desc. : This API Allows User to Set the mode of a Specific Pin */
/******************************************************************/
void MGPIO_vSetPinMode(GPIO_t* GPIOx, MGPIO_PIN Copy_GPIOPin, u8 Copy_u8Mode) {
 80007fe:	b480      	push	{r7}
 8000800:	b083      	sub	sp, #12
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	460b      	mov	r3, r1
 8000808:	70fb      	strb	r3, [r7, #3]
 800080a:	4613      	mov	r3, r2
 800080c:	70bb      	strb	r3, [r7, #2]
    /* i/p Validation */
    if (Copy_u8Mode > MGPIO_MODE_ANALOG) { return; /* Do Nothing */ }
 800080e:	78bb      	ldrb	r3, [r7, #2]
 8000810:	2b03      	cmp	r3, #3
 8000812:	d813      	bhi.n	800083c <MGPIO_vSetPinMode+0x3e>
    WRITE_BITS(GPIOx->MODER, Copy_u8Mode, TWO_BITS, Copy_GPIOPin * 2);
 8000814:	78ba      	ldrb	r2, [r7, #2]
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	4618      	mov	r0, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	2103      	movs	r1, #3
 800082a:	fa01 f303 	lsl.w	r3, r1, r3
 800082e:	43db      	mvns	r3, r3
 8000830:	4013      	ands	r3, r2
 8000832:	ea40 0203 	orr.w	r2, r0, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	e000      	b.n	800083e <MGPIO_vSetPinMode+0x40>
    if (Copy_u8Mode > MGPIO_MODE_ANALOG) { return; /* Do Nothing */ }
 800083c:	bf00      	nop
}
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <MRCC_vInitSysAndBusClock>:
/* Func. Name: MRCC_vInitSysAndBusClock 						  */
/* i/p arguments: nothing              	   						  */
/* o/p arguments: nothing              							  */
/* Desc. : This API Initializes the The System CLK and Busses CLK */
/******************************************************************/
void MRCC_vInitSysAndBusClock() {
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
	#if MRCC_SYSTEM_CLOCK_SOURCE == MRCC_HSI_CLK_SOURCE
		/* Enable HSI */
		SET_BIT(RCC_CR, MRCC_CR_HSION_BIT);
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <MRCC_vInitSysAndBusClock+0x6c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <MRCC_vInitSysAndBusClock+0x6c>)
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	6013      	str	r3, [r2, #0]
		/* Trim HSI */
		WRITE_BITS(RCC_CR, MRCC_HSI_TRIMMING, FIVE_BITS, MRCC_CR_HSITRIM_BIT);
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MRCC_vInitSysAndBusClock+0x6c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <MRCC_vInitSysAndBusClock+0x6c>)
 8000862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000866:	6013      	str	r3, [r2, #0]
		/* Switch System Clock to HSI */
		WRITE_BITS(RCC_CFGR, MRCC_SW_SWITCH_TO_HSI, TWO_BITS, MRCC_CFGR_SW_BIT);
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MRCC_vInitSysAndBusClock+0x70>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MRCC_vInitSysAndBusClock+0x70>)
 800086e:	f023 0303 	bic.w	r3, r3, #3
 8000872:	6013      	str	r3, [r2, #0]
		/* booling till HSI is Stable */
		while(!GET_BIT(RCC_CR, MRCC_CR_HSIRDY_BIT));
 8000874:	bf00      	nop
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MRCC_vInitSysAndBusClock+0x6c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	2b00      	cmp	r3, #0
 8000880:	d0f9      	beq.n	8000876 <MRCC_vInitSysAndBusClock+0x2e>
		while(!GET_BIT(RCC_CR, MRCC_CR_PLLRDY_BIT));
	#else
		#warning "Invalid Clock Source Configuration!"
	#endif
	/* Set the AHB Prescaler */
	WRITE_BITS(RCC_CFGR, MRCC_AHB_PRESCALER, FOUR_BITS, MRCC_CFGR_HPRE_BIT);
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MRCC_vInitSysAndBusClock+0x70>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800088a:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <MRCC_vInitSysAndBusClock+0x70>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000890:	6013      	str	r3, [r2, #0]
	/* Set the APB1 Prescaler */
	WRITE_BITS(RCC_CFGR, MRCC_APB1_PRESCALER, THREE_BITS, MRCC_CFGR_PPRE1_BIT);
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MRCC_vInitSysAndBusClock+0x70>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <MRCC_vInitSysAndBusClock+0x70>)
 8000898:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800089c:	6013      	str	r3, [r2, #0]
	/* Set the APB2 Prescaler */
	WRITE_BITS(RCC_CFGR, MRCC_APB2_PRESCALER, THREE_BITS, MRCC_CFGR_PPRE2_BIT);
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MRCC_vInitSysAndBusClock+0x70>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <MRCC_vInitSysAndBusClock+0x70>)
 80008a4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80008a8:	6013      	str	r3, [r2, #0]
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40023808 	.word	0x40023808

080008bc <MRCC_vEnablePeriphClock>:
/* i/p arguments: Copy_BusID: MRCC_BUS_AHB1 -->  MRCC_BUS_APB2LP             */
/* i/p arguments: Copy_PeriphID: <PeripheralName>EN || <PeripheralName>LPEN  */
/* o/p arguments: nothing                                                    */
/* Desc. : This API Allows the User to Enable CLK for a Specific Peripheral  */
/*****************************************************************************/
void MRCC_vEnablePeriphClock(MRCC_BUS Copy_BusID, MRCC_PeriphClock Copy_PeriphID) {
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	460a      	mov	r2, r1
 80008c6:	71fb      	strb	r3, [r7, #7]
 80008c8:	4613      	mov	r3, r2
 80008ca:	71bb      	strb	r3, [r7, #6]
	switch (Copy_BusID) {
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	2b07      	cmp	r3, #7
 80008d0:	d86a      	bhi.n	80009a8 <MRCC_vEnablePeriphClock+0xec>
 80008d2:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <MRCC_vEnablePeriphClock+0x1c>)
 80008d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d8:	080008f9 	.word	0x080008f9
 80008dc:	0800090f 	.word	0x0800090f
 80008e0:	08000925 	.word	0x08000925
 80008e4:	0800093b 	.word	0x0800093b
 80008e8:	08000951 	.word	0x08000951
 80008ec:	08000967 	.word	0x08000967
 80008f0:	0800097d 	.word	0x0800097d
 80008f4:	08000993 	.word	0x08000993
		case MRCC_BUS_AHB1:   SET_BIT(RCC_AHB1ENR, Copy_PeriphID);   break;
 80008f8:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <MRCC_vEnablePeriphClock+0xfc>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	79ba      	ldrb	r2, [r7, #6]
 80008fe:	2101      	movs	r1, #1
 8000900:	fa01 f202 	lsl.w	r2, r1, r2
 8000904:	4611      	mov	r1, r2
 8000906:	4a2c      	ldr	r2, [pc, #176]	; (80009b8 <MRCC_vEnablePeriphClock+0xfc>)
 8000908:	430b      	orrs	r3, r1
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	e04d      	b.n	80009aa <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_AHB2:   SET_BIT(RCC_AHB2ENR, Copy_PeriphID);   break;
 800090e:	4b2b      	ldr	r3, [pc, #172]	; (80009bc <MRCC_vEnablePeriphClock+0x100>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	2101      	movs	r1, #1
 8000916:	fa01 f202 	lsl.w	r2, r1, r2
 800091a:	4611      	mov	r1, r2
 800091c:	4a27      	ldr	r2, [pc, #156]	; (80009bc <MRCC_vEnablePeriphClock+0x100>)
 800091e:	430b      	orrs	r3, r1
 8000920:	6013      	str	r3, [r2, #0]
 8000922:	e042      	b.n	80009aa <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB1:   SET_BIT(RCC_APB1ENR, Copy_PeriphID);   break;
 8000924:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <MRCC_vEnablePeriphClock+0x104>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	79ba      	ldrb	r2, [r7, #6]
 800092a:	2101      	movs	r1, #1
 800092c:	fa01 f202 	lsl.w	r2, r1, r2
 8000930:	4611      	mov	r1, r2
 8000932:	4a23      	ldr	r2, [pc, #140]	; (80009c0 <MRCC_vEnablePeriphClock+0x104>)
 8000934:	430b      	orrs	r3, r1
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	e037      	b.n	80009aa <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB2:   SET_BIT(RCC_APB2ENR, Copy_PeriphID);   break;
 800093a:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <MRCC_vEnablePeriphClock+0x108>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	79ba      	ldrb	r2, [r7, #6]
 8000940:	2101      	movs	r1, #1
 8000942:	fa01 f202 	lsl.w	r2, r1, r2
 8000946:	4611      	mov	r1, r2
 8000948:	4a1e      	ldr	r2, [pc, #120]	; (80009c4 <MRCC_vEnablePeriphClock+0x108>)
 800094a:	430b      	orrs	r3, r1
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	e02c      	b.n	80009aa <MRCC_vEnablePeriphClock+0xee>
		case MRCC_BUS_AHB1LP: SET_BIT(RCC_AHB1LPENR, Copy_PeriphID); break;
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MRCC_vEnablePeriphClock+0x10c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	79ba      	ldrb	r2, [r7, #6]
 8000956:	2101      	movs	r1, #1
 8000958:	fa01 f202 	lsl.w	r2, r1, r2
 800095c:	4611      	mov	r1, r2
 800095e:	4a1a      	ldr	r2, [pc, #104]	; (80009c8 <MRCC_vEnablePeriphClock+0x10c>)
 8000960:	430b      	orrs	r3, r1
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	e021      	b.n	80009aa <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_AHB2LP: SET_BIT(RCC_AHB2LPENR, Copy_PeriphID); break;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MRCC_vEnablePeriphClock+0x110>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	79ba      	ldrb	r2, [r7, #6]
 800096c:	2101      	movs	r1, #1
 800096e:	fa01 f202 	lsl.w	r2, r1, r2
 8000972:	4611      	mov	r1, r2
 8000974:	4a15      	ldr	r2, [pc, #84]	; (80009cc <MRCC_vEnablePeriphClock+0x110>)
 8000976:	430b      	orrs	r3, r1
 8000978:	6013      	str	r3, [r2, #0]
 800097a:	e016      	b.n	80009aa <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB1LP: SET_BIT(RCC_APB1LPENR, Copy_PeriphID); break;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MRCC_vEnablePeriphClock+0x114>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	79ba      	ldrb	r2, [r7, #6]
 8000982:	2101      	movs	r1, #1
 8000984:	fa01 f202 	lsl.w	r2, r1, r2
 8000988:	4611      	mov	r1, r2
 800098a:	4a11      	ldr	r2, [pc, #68]	; (80009d0 <MRCC_vEnablePeriphClock+0x114>)
 800098c:	430b      	orrs	r3, r1
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	e00b      	b.n	80009aa <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB2LP: SET_BIT(RCC_APB2LPENR, Copy_PeriphID); break;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MRCC_vEnablePeriphClock+0x118>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	79ba      	ldrb	r2, [r7, #6]
 8000998:	2101      	movs	r1, #1
 800099a:	fa01 f202 	lsl.w	r2, r1, r2
 800099e:	4611      	mov	r1, r2
 80009a0:	4a0c      	ldr	r2, [pc, #48]	; (80009d4 <MRCC_vEnablePeriphClock+0x118>)
 80009a2:	430b      	orrs	r3, r1
 80009a4:	6013      	str	r3, [r2, #0]
 80009a6:	e000      	b.n	80009aa <MRCC_vEnablePeriphClock+0xee>
        default: break;
 80009a8:	bf00      	nop
    }
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023830 	.word	0x40023830
 80009bc:	40023834 	.word	0x40023834
 80009c0:	40023840 	.word	0x40023840
 80009c4:	40023844 	.word	0x40023844
 80009c8:	40023850 	.word	0x40023850
 80009cc:	40023854 	.word	0x40023854
 80009d0:	40023860 	.word	0x40023860
 80009d4:	40023864 	.word	0x40023864

080009d8 <SysTick_Handler>:
/* Func. Name: SysTick_Handler           */
/* i/p arguments: nothing                */
/* o/p arguments: nothing                */
/* Desc. : This API is SysTick Interrupt */
/*****************************************/
void SysTick_Handler() {
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
    if (Global_u8CallMode == MSTK_SINGLE_CALL_MODE) {
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <SysTick_Handler+0x48>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d111      	bne.n	8000a08 <SysTick_Handler+0x30>
        /* Disable INT */
        CLR_BIT(STK_CTRL,MSTK_CTRL_TICKINT_BIT);
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <SysTick_Handler+0x4c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <SysTick_Handler+0x4c>)
 80009ea:	f023 0302 	bic.w	r3, r3, #2
 80009ee:	6013      	str	r3, [r2, #0]
        /* Stop the Timer */
        CLR_BIT(STK_CTRL,MSTK_CTRL_ENABLE_BIT);
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <SysTick_Handler+0x4c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <SysTick_Handler+0x4c>)
 80009f6:	f023 0301 	bic.w	r3, r3, #1
 80009fa:	6013      	str	r3, [r2, #0]
        STK_LOAD = 0;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <SysTick_Handler+0x50>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
        STK_VAL = 0;
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <SysTick_Handler+0x54>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
    }
    if (MSTK_CallBack != NULL) { MSTK_CallBack(); }
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <SysTick_Handler+0x58>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <SysTick_Handler+0x3e>
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <SysTick_Handler+0x58>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4798      	blx	r3
    /* Clear Flag */
    (void)GET_BIT(STK_CTRL,MSTK_CTRL_COUNTFLAG_BIT);
 8000a16:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <SysTick_Handler+0x4c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000020 	.word	0x20000020
 8000a24:	e000e010 	.word	0xe000e010
 8000a28:	e000e014 	.word	0xe000e014
 8000a2c:	e000e018 	.word	0xe000e018
 8000a30:	2000001c 	.word	0x2000001c

08000a34 <USART1_IRQHandler>:
{ MUSART2_CallBack = ptr; }
void MUSART6_vSetCallBack(void (*ptr)(void))
{ MUSART6_CallBack = ptr; }


void USART1_IRQHandler(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	USART1->SR = 0;
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <USART1_IRQHandler+0x14>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
	MUSART1_CallBack();
 8000a3e:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <USART1_IRQHandler+0x18>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4798      	blx	r3
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40011000 	.word	0x40011000
 8000a4c:	20000024 	.word	0x20000024

08000a50 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	USART2->SR = 0 ;
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <USART2_IRQHandler+0x14>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
	MUSART2_CallBack();
 8000a5a:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <USART2_IRQHandler+0x18>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4798      	blx	r3
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40004400 	.word	0x40004400
 8000a68:	20000028 	.word	0x20000028

08000a6c <USART6_IRQHandler>:

void USART6_IRQHandler(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	USART6->SR = 0 ;
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <USART6_IRQHandler+0x14>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
	MUSART6_CallBack();
 8000a76:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <USART6_IRQHandler+0x18>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4798      	blx	r3
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40011400 	.word	0x40011400
 8000a84:	2000002c 	.word	0x2000002c

08000a88 <APP_vInit>:
#include "MDMA_Interface.h"


u16 APP_u16IRData[2];

void APP_vInit(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
	/* INIT CLOCK AND PERIPHERALS CLOCK */
	MRCC_vInitSysAndBusClock();
 8000a8e:	f7ff fedb 	bl	8000848 <MRCC_vInitSysAndBusClock>
	MRCC_vEnablePeriphClock(MRCC_BUS_AHB1, MRCC_AHB1_GPIOAEN);
 8000a92:	2100      	movs	r1, #0
 8000a94:	2000      	movs	r0, #0
 8000a96:	f7ff ff11 	bl	80008bc <MRCC_vEnablePeriphClock>
	MRCC_vEnablePeriphClock(MRCC_BUS_APB2, MRCC_APB2_ADC1EN);
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f7ff ff0d 	bl	80008bc <MRCC_vEnablePeriphClock>
	MRCC_vEnablePeriphClock(MRCC_BUS_AHB1, MRCC_AHB1_DMA2EN);
 8000aa2:	2116      	movs	r1, #22
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff ff09 	bl	80008bc <MRCC_vEnablePeriphClock>
	/* INIT ALL NEEDED PINS */
	MGPIO_vSetPinMode(GPIOA, MGPIO_PIN00, MGPIO_MODE_ANALOG);
 8000aaa:	2203      	movs	r2, #3
 8000aac:	2100      	movs	r1, #0
 8000aae:	4826      	ldr	r0, [pc, #152]	; (8000b48 <APP_vInit+0xc0>)
 8000ab0:	f7ff fea5 	bl	80007fe <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(GPIOA, MGPIO_PIN01, MGPIO_MODE_ANALOG);
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4823      	ldr	r0, [pc, #140]	; (8000b48 <APP_vInit+0xc0>)
 8000aba:	f7ff fea0 	bl	80007fe <MGPIO_vSetPinMode>
	/* INIT ADC SETTINGS */
	MADC_vInit();
 8000abe:	f7ff fb89 	bl	80001d4 <MADC_vInit>
	MADC_vSetNumberOfConversions(MADC_REGULAR_GROUP, MADC_TWO_CONVERSIONS);
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff fc91 	bl	80003ec <MADC_vSetNumberOfConversions>
	MADC_vSetSamplingTime(MADC_CHANNEL0, MADC_SAMPLING_CYCLES_3);
 8000aca:	2100      	movs	r1, #0
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff fc2f 	bl	8000330 <MADC_vSetSamplingTime>
	MADC_vSetSamplingTime(MADC_CHANNEL1, MADC_SAMPLING_CYCLES_3);
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f7ff fc2b 	bl	8000330 <MADC_vSetSamplingTime>
	MADC_vSetSequence(MADC_REGULAR_GROUP, MADC_CHANNEL0, MADC_SEQUENCE_1);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f7ff fcac 	bl	800043c <MADC_vSetSequence>
	MADC_vSetSequence(MADC_REGULAR_GROUP, MADC_CHANNEL1, MADC_SEQUENCE_2);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f7ff fca7 	bl	800043c <MADC_vSetSequence>

	volatile u32* DMAsrcAddr = MADC_vSetRegularDMA(MADC_ENABLE);
 8000aee:	2001      	movs	r0, #1
 8000af0:	f7ff fbf4 	bl	80002dc <MADC_vSetRegularDMA>
 8000af4:	6178      	str	r0, [r7, #20]
	/* Enable DMA */
	MDMA_DirectInitType dma = {MDMA_DISABLE, MDMA_DIRECTION_PER_MEM, MDMA_ENABLE,
 8000af6:	4a15      	ldr	r2, [pc, #84]	; (8000b4c <APP_vInit+0xc4>)
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b00:	6018      	str	r0, [r3, #0]
 8000b02:	3304      	adds	r3, #4
 8000b04:	8019      	strh	r1, [r3, #0]
 8000b06:	3302      	adds	r3, #2
 8000b08:	0c0a      	lsrs	r2, r1, #16
 8000b0a:	701a      	strb	r2, [r3, #0]
								MDMA_DISABLE, MDMA_ENABLE, MDMA_PRIORITY_LOW, MDMA_CHANNEL_0};
	MDMA_TransferStruct dmat = {(u32*)DMAsrcAddr, (u32*)APP_u16IRData, 2, MDMA_SIZE_HWORD};
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <APP_vInit+0xc8>)
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	2302      	movs	r3, #2
 8000b16:	813b      	strh	r3, [r7, #8]
 8000b18:	2301      	movs	r3, #1
 8000b1a:	72bb      	strb	r3, [r7, #10]
	MDMA_vDirectInit(DMA2, MDMA_STREAM_0, &dma);
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	461a      	mov	r2, r3
 8000b22:	2100      	movs	r1, #0
 8000b24:	480b      	ldr	r0, [pc, #44]	; (8000b54 <APP_vInit+0xcc>)
 8000b26:	f7ff fd05 	bl	8000534 <MDMA_vDirectInit>

	MDMA_vStart(DMA2, MDMA_STREAM_0, &dmat);
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4808      	ldr	r0, [pc, #32]	; (8000b54 <APP_vInit+0xcc>)
 8000b32:	f7ff fdea 	bl	800070a <MDMA_vStart>

	MADC_vEnable(MADC_ENABLE, MADC_DISABLE);
 8000b36:	2100      	movs	r1, #0
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f7ff fba7 	bl	800028c <MADC_vEnable>
}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	08000c18 	.word	0x08000c18
 8000b50:	20000030 	.word	0x20000030
 8000b54:	40026400 	.word	0x40026400

08000b58 <main>:

int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	APP_vInit();
 8000b5c:	f7ff ff94 	bl	8000a88 <APP_vInit>
    /* Loop forever */
	for(;;) {}
 8000b60:	e7fe      	b.n	8000b60 <main+0x8>
	...

08000b64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b66:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b68:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	; (8000ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <LoopForever+0xe>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	; (8000bb0 <LoopForever+0x16>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b92:	f000 f811 	bl	8000bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b96:	f7ff ffdf 	bl	8000b58 <main>

08000b9a <LoopForever>:

LoopForever:
  b LoopForever
 8000b9a:	e7fe      	b.n	8000b9a <LoopForever>
  ldr   r0, =_estack
 8000b9c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ba8:	08000c28 	.word	0x08000c28
  ldr r2, =_sbss
 8000bac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000bb0:	20000034 	.word	0x20000034

08000bb4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC_IRQHandler>
	...

08000bb8 <__libc_init_array>:
 8000bb8:	b570      	push	{r4, r5, r6, lr}
 8000bba:	4d0d      	ldr	r5, [pc, #52]	; (8000bf0 <__libc_init_array+0x38>)
 8000bbc:	4c0d      	ldr	r4, [pc, #52]	; (8000bf4 <__libc_init_array+0x3c>)
 8000bbe:	1b64      	subs	r4, r4, r5
 8000bc0:	10a4      	asrs	r4, r4, #2
 8000bc2:	2600      	movs	r6, #0
 8000bc4:	42a6      	cmp	r6, r4
 8000bc6:	d109      	bne.n	8000bdc <__libc_init_array+0x24>
 8000bc8:	4d0b      	ldr	r5, [pc, #44]	; (8000bf8 <__libc_init_array+0x40>)
 8000bca:	4c0c      	ldr	r4, [pc, #48]	; (8000bfc <__libc_init_array+0x44>)
 8000bcc:	f000 f818 	bl	8000c00 <_init>
 8000bd0:	1b64      	subs	r4, r4, r5
 8000bd2:	10a4      	asrs	r4, r4, #2
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	42a6      	cmp	r6, r4
 8000bd8:	d105      	bne.n	8000be6 <__libc_init_array+0x2e>
 8000bda:	bd70      	pop	{r4, r5, r6, pc}
 8000bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000be0:	4798      	blx	r3
 8000be2:	3601      	adds	r6, #1
 8000be4:	e7ee      	b.n	8000bc4 <__libc_init_array+0xc>
 8000be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bea:	4798      	blx	r3
 8000bec:	3601      	adds	r6, #1
 8000bee:	e7f2      	b.n	8000bd6 <__libc_init_array+0x1e>
 8000bf0:	08000c20 	.word	0x08000c20
 8000bf4:	08000c20 	.word	0x08000c20
 8000bf8:	08000c20 	.word	0x08000c20
 8000bfc:	08000c24 	.word	0x08000c24

08000c00 <_init>:
 8000c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c02:	bf00      	nop
 8000c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c06:	bc08      	pop	{r3}
 8000c08:	469e      	mov	lr, r3
 8000c0a:	4770      	bx	lr

08000c0c <_fini>:
 8000c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0e:	bf00      	nop
 8000c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c12:	bc08      	pop	{r3}
 8000c14:	469e      	mov	lr, r3
 8000c16:	4770      	bx	lr
