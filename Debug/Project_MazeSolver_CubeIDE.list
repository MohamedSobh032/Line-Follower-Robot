
Project_MazeSolver_CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e90  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002028  08002028  00012028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800204c  0800204c  00012054  2**0
                  CONTENTS
  4 .ARM          00000000  0800204c  0800204c  00012054  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800204c  08002054  00012054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800204c  0800204c  0001204c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002050  08002050  00012050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00012054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000000  08002054  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002054  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00012084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002b1d  00000000  00000000  000120c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ae7  00000000  00000000  00014be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000338  00000000  00000000  000156d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000248  00000000  00000000  00015a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001a3b  00000000  00000000  00015c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000014c7  00000000  00000000  0001768b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000081b5  00000000  00000000  00018b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c50  00000000  00000000  00020d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00021958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002010 	.word	0x08002010

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08002010 	.word	0x08002010

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <MADC_vInit>:
/* Func. Name: MADC_vInit                            */
/* i/p arguments: nothing                            */
/* o/p arguments: nothing                            */
/* Desc. : This API Initializes General ADC Settings */
/*****************************************************/
void MADC_vInit(void) {
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
	/* Set the Prescaler of the ADC CLK */
	WRITE_BITS(ADC_CCR, MADC_CLOCK_PRESCALER, TWO_BITS, MADC_CCR_ADCPRE0_BIT);
 8000a58:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <MADC_vInit+0xb0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a29      	ldr	r2, [pc, #164]	; (8000b04 <MADC_vInit+0xb0>)
 8000a5e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000a62:	6013      	str	r3, [r2, #0]

	/* Set the Data Allignment */
	if (MADC_DATA_ALLIGNMENT == MADC_ALLIGN_RIGHT) { CLR_BIT(ADC1->CR2, MADC_CR2_ALLIGN_BIT); }
 8000a64:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <MADC_vInit+0xb4>)
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	4a27      	ldr	r2, [pc, #156]	; (8000b08 <MADC_vInit+0xb4>)
 8000a6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a6e:	6093      	str	r3, [r2, #8]
	else 										   { SET_BIT(ADC1->CR2, MADC_CR2_ALLIGN_BIT); }

	/* Set the Resolution of the ADC */
	WRITE_BITS(ADC1->CR1, MADC_RESOLUTION, TWO_BITS, MADC_CR1_RES0_BIT);
 8000a70:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <MADC_vInit+0xb4>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	4a24      	ldr	r2, [pc, #144]	; (8000b08 <MADC_vInit+0xb4>)
 8000a76:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000a7a:	6053      	str	r3, [r2, #4]
	#if MADC_SCANNING_MODE == MADC_SINGLE_CONVERSION_MODE
		CLR_BIT(ADC1->CR1, MADC_CR1_SCAN_BIT);
		/* Clear the EOC After Each Regular Conversion (BY DEFAULT IT IS SINGLE CONVERSION) */
		CLR_BIT(ADC1->CR2, MADC_CR2_EOCS_BIT);
	#elif MADC_SCANNING_MODE == MADC_SCAN_CONVERSION_MODE
		SET_BIT(ADC1->CR1, MADC_CR1_SCAN_BIT);
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <MADC_vInit+0xb4>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	4a21      	ldr	r2, [pc, #132]	; (8000b08 <MADC_vInit+0xb4>)
 8000a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a86:	6053      	str	r3, [r2, #4]
		if (MADC_END_OF_CONVERSION_LOCATION == MADC_EOC_REGULAR_SEQUENCE_END) { CLR_BIT(ADC1->CR2, MADC_CR2_EOCS_BIT); }
		else																  { SET_BIT(ADC1->CR2, MADC_CR2_EOCS_BIT); }
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <MADC_vInit+0xb4>)
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	4a1e      	ldr	r2, [pc, #120]	; (8000b08 <MADC_vInit+0xb4>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a92:	6093      	str	r3, [r2, #8]
	/* Set the Conversion Mode of Regular Group */
	#if MADC_REGULAR_CONVERSION_MODE == MADC_NORMAL_CONVERSION
		CLR_BIT(ADC1->CR1, MADC_CR1_DISCEN_BIT);
		CLR_BIT(ADC1->CR2, MADC_CR2_CONT_BIT);
	#elif  MADC_REGULAR_CONVERSION_MODE == MADC_CONTINUOUS_CONVERSION
		CLR_BIT(ADC1->CR1, MADC_CR1_DISCEN_BIT);
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MADC_vInit+0xb4>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <MADC_vInit+0xb4>)
 8000a9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a9e:	6053      	str	r3, [r2, #4]
		SET_BIT(ADC1->CR2, MADC_CR2_CONT_BIT);
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MADC_vInit+0xb4>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <MADC_vInit+0xb4>)
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	6093      	str	r3, [r2, #8]

	#if MADC_REGULAR_EXTERNAL_TRIGGER == MADC_ENABLE
		WRITE_BITS(ADC1->CR2, MADC_REGULAR_EXTERNAL_TRIGGER_EDGE, TWO_BITS, MADC_CR2_EXTEN0_BIT);
		WRITE_BITS(ADC1->CR2, MADC_REGULAR_EXTERNAL_TRIGGER_SOURCE, FOUR_BITS, MADC_CR2_EXTSEL0_BIT);
	#else
		WRITE_BITS(ADC1->CR2, MADC_TRIG_EDGE_DISABLED, TWO_BITS, MADC_CR2_EXTEN0_BIT);
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MADC_vInit+0xb4>)
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <MADC_vInit+0xb4>)
 8000ab2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000ab6:	6093      	str	r3, [r2, #8]
	/* Set the Conversion Mode of Injected Group */
	#if MADC_INJECTED_CONVERSION_MODE == MADC_NORMAL_CONVERSION
		CLR_BIT(ADC1->CR1, MADC_CR1_JDISCEN_BIT);
		CLR_BIT(ADC1->CR2, MADC_CR2_CONT_BIT);
	#elif  MADC_INJECTED_CONVERSION_MODE == MADC_CONTINUOUS_CONVERSION
		CLR_BIT(ADC1->CR1, MADC_CR1_JDISCEN_BIT);
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MADC_vInit+0xb4>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MADC_vInit+0xb4>)
 8000abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ac2:	6053      	str	r3, [r2, #4]
		SET_BIT(ADC1->CR2, MADC_CR2_CONT_BIT);
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MADC_vInit+0xb4>)
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <MADC_vInit+0xb4>)
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	6093      	str	r3, [r2, #8]

	#if MADC_INJECTED_EXTERNAL_TRIGGER == MADC_ENABLE
		WRITE_BITS(ADC1->CR2, MADC_INJECTED_EXTERNAL_TRIGGER_EDGE, TWO_BITS, MADC_CR2_JEXTEN0_BIT);
		WRITE_BITS(ADC1->CR2, MADC_INJECTED_EXTERNAL_TRIGGER_SOURCE, FOUR_BITS, MADC_CR2_JEXTSEL0_BIT);
	#else
		WRITE_BITS(ADC1->CR2, MADC_TRIG_EDGE_DISABLED, TWO_BITS, MADC_CR2_JEXTEN0_BIT);
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <MADC_vInit+0xb4>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	4a0c      	ldr	r2, [pc, #48]	; (8000b08 <MADC_vInit+0xb4>)
 8000ad6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000ada:	6093      	str	r3, [r2, #8]
	#endif

	/* Set Automatic Injection */
	if (MADC_AUTOMATIC_INJECTION == MADC_ENABLE) { SET_BIT(ADC1->CR1, MADC_CR1_JAUTO_BIT); }
	else										 { CLR_BIT(ADC1->CR1, MADC_CR1_JAUTO_BIT); }
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <MADC_vInit+0xb4>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	4a09      	ldr	r2, [pc, #36]	; (8000b08 <MADC_vInit+0xb4>)
 8000ae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ae6:	6053      	str	r3, [r2, #4]
	/**************************************************************************************************/

	/* Set ADC to Power Down Mode */
	CLR_BIT(ADC1->CR2, MADC_CR2_ADON_BIT);
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <MADC_vInit+0xb4>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <MADC_vInit+0xb4>)
 8000aee:	f023 0301 	bic.w	r3, r3, #1
 8000af2:	6093      	str	r3, [r2, #8]

	/* Clear Status Register */
	ADC1->SR = 0;
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <MADC_vInit+0xb4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	40015004 	.word	0x40015004
 8000b08:	40012000 	.word	0x40012000

08000b0c <MADC_vEnable>:
/* Func. Name: MADC_vEnable          */
/* i/p arguments: nothing            */
/* o/p arguments: nothing            */
/* Desc. : This API Wakes up the ADC */
/*************************************/
void MADC_vEnable(u8 Copy_u8EnableReg, u8 Copy_u8EnableInj) {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	460a      	mov	r2, r1
 8000b16:	71fb      	strb	r3, [r7, #7]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	71bb      	strb	r3, [r7, #6]
	/* Wake up ADC from Power Down Mode */
	SET_BIT(ADC1->CR2, MADC_CR2_ADON_BIT);
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MADC_vEnable+0x4c>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <MADC_vEnable+0x4c>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6093      	str	r3, [r2, #8]
	if (Copy_u8EnableReg == MADC_ENABLE) {
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d105      	bne.n	8000b3a <MADC_vEnable+0x2e>
		SET_BIT(ADC1->CR2, MADC_CR2_SWSTART_BIT);
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <MADC_vEnable+0x4c>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <MADC_vEnable+0x4c>)
 8000b34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000b38:	6093      	str	r3, [r2, #8]
	}
	if (Copy_u8EnableInj == MADC_ENABLE) {
 8000b3a:	79bb      	ldrb	r3, [r7, #6]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d105      	bne.n	8000b4c <MADC_vEnable+0x40>
		SET_BIT(ADC1->CR2, MADC_CR2_JSWSTART_BIT);
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <MADC_vEnable+0x4c>)
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <MADC_vEnable+0x4c>)
 8000b46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b4a:	6093      	str	r3, [r2, #8]
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	40012000 	.word	0x40012000

08000b5c <MADC_u32SetRegularDMA>:
/* Func. Name: MADC_u32SetRegularDMA                              */
/* i/p arguments: Copy_u8Status: MADC_<Status>                    */
/* o/p arguments: Address of the Data Register                    */
/* Desc. : This API Enables Requesting DMA (STREAM 0 - CHANNEL 0) */
/******************************************************************/
volatile u32* MADC_u32SetRegularDMA(u8 Copy_u8Status) {
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	if (Copy_u8Status == MADC_ENABLE) {
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d10f      	bne.n	8000b8c <MADC_u32SetRegularDMA+0x30>
		SET_BIT(ADC1->CR2, MADC_CR2_DMA_BIT);
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MADC_u32SetRegularDMA+0x4c>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <MADC_u32SetRegularDMA+0x4c>)
 8000b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b76:	6093      	str	r3, [r2, #8]
		SET_BIT(ADC1->CR2, MADC_CR2_DDS_BIT);
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <MADC_u32SetRegularDMA+0x4c>)
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <MADC_u32SetRegularDMA+0x4c>)
 8000b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b82:	6093      	str	r3, [r2, #8]
		ADC1->SR = 0;
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <MADC_u32SetRegularDMA+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	e005      	b.n	8000b98 <MADC_u32SetRegularDMA+0x3c>
	}
	else { CLR_BIT(ADC1->CR2, MADC_CR2_DMA_BIT); }
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MADC_u32SetRegularDMA+0x4c>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <MADC_u32SetRegularDMA+0x4c>)
 8000b92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b96:	6093      	str	r3, [r2, #8]
	return &(ADC1->DR);
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <MADC_u32SetRegularDMA+0x50>)
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40012000 	.word	0x40012000
 8000bac:	4001204c 	.word	0x4001204c

08000bb0 <MADC_vSetSamplingTime>:
/* i/p arguments: Channel: MADC_CHANNEL<Number>		 	                */
/* i/p arguments: Copy_u8SampleTime: MADC_SAMPLING_CYCLES_<Number>      */
/* o/p arguments: nothing                                               */
/* Desc. : This API Sets the Sample Time in Clocks for Selected Channel */
/************************************************************************/
void MADC_vSetSamplingTime(MADC_CHANNEL Channel, u8 Copy_u8SampleTime) {
 8000bb0:	b4b0      	push	{r4, r5, r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	460a      	mov	r2, r1
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	71bb      	strb	r3, [r7, #6]
	WRITE_BITS(ADC1->SMPR[1 - (Channel % 10)], Copy_u8SampleTime, THREE_BITS, ((Channel % 10) * 3));
 8000bc0:	79b8      	ldrb	r0, [r7, #6]
 8000bc2:	79fa      	ldrb	r2, [r7, #7]
 8000bc4:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <MADC_vSetSamplingTime+0xb4>)
 8000bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8000bca:	08d9      	lsrs	r1, r3, #3
 8000bcc:	460b      	mov	r3, r1
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4613      	mov	r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	4413      	add	r3, r2
 8000be0:	fa00 f303 	lsl.w	r3, r0, r3
 8000be4:	461d      	mov	r5, r3
 8000be6:	4820      	ldr	r0, [pc, #128]	; (8000c68 <MADC_vSetSamplingTime+0xb8>)
 8000be8:	79fa      	ldrb	r2, [r7, #7]
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <MADC_vSetSamplingTime+0xb4>)
 8000bec:	fba3 1302 	umull	r1, r3, r3, r2
 8000bf0:	08d9      	lsrs	r1, r3, #3
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f1c3 0301 	rsb	r3, r3, #1
 8000c02:	3302      	adds	r3, #2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4403      	add	r3, r0
 8000c08:	6858      	ldr	r0, [r3, #4]
 8000c0a:	79fa      	ldrb	r2, [r7, #7]
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MADC_vSetSamplingTime+0xb4>)
 8000c0e:	fba3 1302 	umull	r1, r3, r3, r2
 8000c12:	08d9      	lsrs	r1, r3, #3
 8000c14:	460b      	mov	r3, r1
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	440b      	add	r3, r1
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	461a      	mov	r2, r3
 8000c22:	4613      	mov	r3, r2
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	4413      	add	r3, r2
 8000c28:	2207      	movs	r2, #7
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	4018      	ands	r0, r3
 8000c32:	4c0d      	ldr	r4, [pc, #52]	; (8000c68 <MADC_vSetSamplingTime+0xb8>)
 8000c34:	79fa      	ldrb	r2, [r7, #7]
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MADC_vSetSamplingTime+0xb4>)
 8000c38:	fba3 1302 	umull	r1, r3, r3, r2
 8000c3c:	08d9      	lsrs	r1, r3, #3
 8000c3e:	460b      	mov	r3, r1
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	440b      	add	r3, r1
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	f1c3 0301 	rsb	r3, r3, #1
 8000c4e:	ea45 0200 	orr.w	r2, r5, r0
 8000c52:	3302      	adds	r3, #2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4423      	add	r3, r4
 8000c58:	605a      	str	r2, [r3, #4]
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bcb0      	pop	{r4, r5, r7}
 8000c62:	4770      	bx	lr
 8000c64:	cccccccd 	.word	0xcccccccd
 8000c68:	40012000 	.word	0x40012000

08000c6c <MADC_vSetNumberOfConversions>:
/* i/p arguments: Copy_u8Group: MADC_<Group>_GROUP			    */
/* i/p arguments: Copy_u8Conversions: MADC_<Number>_CONVERSIONS	*/
/* o/p arguments: nothing                                       */
/* Desc. : This API Sets the Number of Channels to be Converted */
/****************************************************************/
void MADC_vSetNumberOfConversions(u8 Copy_u8Group, u8 Copy_u8Conversions) {
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	460a      	mov	r2, r1
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	71bb      	strb	r3, [r7, #6]
	if (Copy_u8Group == MADC_REGULAR_GROUP) { WRITE_BITS(ADC1->SQR[0], Copy_u8Conversions, FOUR_BITS, MADC_SQR1_L0_BIT);  }
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10a      	bne.n	8000c98 <MADC_vSetNumberOfConversions+0x2c>
 8000c82:	79bb      	ldrb	r3, [r7, #6]
 8000c84:	051b      	lsls	r3, r3, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MADC_vSetNumberOfConversions+0x4c>)
 8000c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000c90:	4a09      	ldr	r2, [pc, #36]	; (8000cb8 <MADC_vSetNumberOfConversions+0x4c>)
 8000c92:	430b      	orrs	r3, r1
 8000c94:	62d3      	str	r3, [r2, #44]	; 0x2c
	else 									{ WRITE_BITS(ADC1->JSQR  , Copy_u8Conversions, TWO_BITS , MADC_JSQR_JL0_BIT); }
}
 8000c96:	e009      	b.n	8000cac <MADC_vSetNumberOfConversions+0x40>
	else 									{ WRITE_BITS(ADC1->JSQR  , Copy_u8Conversions, TWO_BITS , MADC_JSQR_JL0_BIT); }
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	051b      	lsls	r3, r3, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MADC_vSetNumberOfConversions+0x4c>)
 8000ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <MADC_vSetNumberOfConversions+0x4c>)
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	40012000 	.word	0x40012000

08000cbc <MADC_vSetSequence>:
/* i/p arguments: Channel: MADC_CHANNEL<Number>		 	                            */
/* i/p arguments: Copy_u8SeqNumber: MADC_SEQUENCE_<Number>	                        */
/* o/p arguments: nothing                                                           */
/* Desc. : This API Sets the Selected Channel to be in a Specific Sequence Location */
/************************************************************************************/
void MADC_vSetSequence(u8 Copy_u8Group, MADC_CHANNEL Channel, u8 Copy_u8SeqNumber) {
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	71bb      	strb	r3, [r7, #6]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	717b      	strb	r3, [r7, #5]
	if (Copy_u8Group == MADC_REGULAR_GROUP) {
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d150      	bne.n	8000d76 <MADC_vSetSequence+0xba>
		if (Copy_u8SeqNumber <= MADC_SEQUENCE_6) {
 8000cd4:	797b      	ldrb	r3, [r7, #5]
 8000cd6:	2b05      	cmp	r3, #5
 8000cd8:	d816      	bhi.n	8000d08 <MADC_vSetSequence+0x4c>
			WRITE_BITS(ADC1->SQR[2], Channel, FIVE_BITS, Copy_u8SeqNumber * 5);
 8000cda:	79b9      	ldrb	r1, [r7, #6]
 8000cdc:	797a      	ldrb	r2, [r7, #5]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <MADC_vSetSequence+0xf4>)
 8000cec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cee:	797a      	ldrb	r2, [r7, #5]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
 8000cf6:	221f      	movs	r2, #31
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	400b      	ands	r3, r1
 8000d00:	4a2b      	ldr	r2, [pc, #172]	; (8000db0 <MADC_vSetSequence+0xf4>)
 8000d02:	4303      	orrs	r3, r0
 8000d04:	6353      	str	r3, [r2, #52]	; 0x34
			WRITE_BITS(ADC1->SQR[0], Channel, FIVE_BITS, (Copy_u8SeqNumber - MADC_SEQUENCE_13) * 5);
		}
	} else {
		WRITE_BITS(ADC1->JSQR, Channel, FIVE_BITS, Copy_u8SeqNumber * 5);
	}
}
 8000d06:	e04c      	b.n	8000da2 <MADC_vSetSequence+0xe6>
		} else if (Copy_u8SeqNumber <= MADC_SEQUENCE_12) {
 8000d08:	797b      	ldrb	r3, [r7, #5]
 8000d0a:	2b0b      	cmp	r3, #11
 8000d0c:	d818      	bhi.n	8000d40 <MADC_vSetSequence+0x84>
			WRITE_BITS(ADC1->SQR[1], Channel, FIVE_BITS, (Copy_u8SeqNumber - MADC_SEQUENCE_7) * 5);
 8000d0e:	79b9      	ldrb	r1, [r7, #6]
 8000d10:	797b      	ldrb	r3, [r7, #5]
 8000d12:	1f9a      	subs	r2, r3, #6
 8000d14:	4613      	mov	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <MADC_vSetSequence+0xf4>)
 8000d22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d24:	797b      	ldrb	r3, [r7, #5]
 8000d26:	1f9a      	subs	r2, r3, #6
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	221f      	movs	r2, #31
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	400b      	ands	r3, r1
 8000d38:	4a1d      	ldr	r2, [pc, #116]	; (8000db0 <MADC_vSetSequence+0xf4>)
 8000d3a:	4303      	orrs	r3, r0
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d3e:	e030      	b.n	8000da2 <MADC_vSetSequence+0xe6>
			WRITE_BITS(ADC1->SQR[0], Channel, FIVE_BITS, (Copy_u8SeqNumber - MADC_SEQUENCE_13) * 5);
 8000d40:	79b9      	ldrb	r1, [r7, #6]
 8000d42:	797b      	ldrb	r3, [r7, #5]
 8000d44:	f1a3 020c 	sub.w	r2, r3, #12
 8000d48:	4613      	mov	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <MADC_vSetSequence+0xf4>)
 8000d56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d58:	797b      	ldrb	r3, [r7, #5]
 8000d5a:	f1a3 020c 	sub.w	r2, r3, #12
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	221f      	movs	r2, #31
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	400b      	ands	r3, r1
 8000d6e:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <MADC_vSetSequence+0xf4>)
 8000d70:	4303      	orrs	r3, r0
 8000d72:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000d74:	e015      	b.n	8000da2 <MADC_vSetSequence+0xe6>
		WRITE_BITS(ADC1->JSQR, Channel, FIVE_BITS, Copy_u8SeqNumber * 5);
 8000d76:	79b9      	ldrb	r1, [r7, #6]
 8000d78:	797a      	ldrb	r2, [r7, #5]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <MADC_vSetSequence+0xf4>)
 8000d88:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000d8a:	797a      	ldrb	r2, [r7, #5]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	221f      	movs	r2, #31
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	400b      	ands	r3, r1
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <MADC_vSetSequence+0xf4>)
 8000d9e:	4303      	orrs	r3, r0
 8000da0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40012000 	.word	0x40012000

08000db4 <MDMA_vDirectInit>:
/* i/p arguments: Copy_u8Stream: MDMA_STREAM_[Stream Number] */
/* i/p arguments: A_InitStruct: Initialization Structure     */
/* o/p arguments: nothing              						 */
/* Desc. : This API Initializes DMA to Direct Mode  		 */
/*************************************************************/
void MDMA_vDirectInit(DMA_t* DMAx, u8 Copy_u8Stream, MDMA_DirectInitType* A_InitStruct) {
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	607a      	str	r2, [r7, #4]
 8000dc0:	72fb      	strb	r3, [r7, #11]
	/* Disable DMA Stream */
	CLR_BIT(DMAx->S[Copy_u8Stream].CR, MDMA_SxCR_EN_BIT);
 8000dc2:	7afa      	ldrb	r2, [r7, #11]
 8000dc4:	68f9      	ldr	r1, [r7, #12]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	440b      	add	r3, r1
 8000dd0:	3310      	adds	r3, #16
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	7afa      	ldrb	r2, [r7, #11]
 8000dd6:	f023 0101 	bic.w	r1, r3, #1
 8000dda:	68f8      	ldr	r0, [r7, #12]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4413      	add	r3, r2
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	4403      	add	r3, r0
 8000de6:	3310      	adds	r3, #16
 8000de8:	6019      	str	r1, [r3, #0]
	/* Enable Direct Mode */
	CLR_BIT(DMAx->S[Copy_u8Stream].FCR, MDMA_SxFCR_DMDIS_BIT);
 8000dea:	7afa      	ldrb	r2, [r7, #11]
 8000dec:	68f9      	ldr	r1, [r7, #12]
 8000dee:	4613      	mov	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	440b      	add	r3, r1
 8000df8:	3324      	adds	r3, #36	; 0x24
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	7afa      	ldrb	r2, [r7, #11]
 8000dfe:	f023 0104 	bic.w	r1, r3, #4
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	4613      	mov	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4413      	add	r3, r2
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	4403      	add	r3, r0
 8000e0e:	3324      	adds	r3, #36	; 0x24
 8000e10:	6019      	str	r1, [r3, #0]
	/* Set the Transfer Direction */
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_InitStruct->TransferDirection, TWO_BITS, MDMA_SxCR_DIR0_BIT);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	785b      	ldrb	r3, [r3, #1]
 8000e16:	019b      	lsls	r3, r3, #6
 8000e18:	4618      	mov	r0, r3
 8000e1a:	7afa      	ldrb	r2, [r7, #11]
 8000e1c:	68f9      	ldr	r1, [r7, #12]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	4413      	add	r3, r2
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	440b      	add	r3, r1
 8000e28:	3310      	adds	r3, #16
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000e30:	7afa      	ldrb	r2, [r7, #11]
 8000e32:	ea40 0103 	orr.w	r1, r0, r3
 8000e36:	68f8      	ldr	r0, [r7, #12]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	4413      	add	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	4403      	add	r3, r0
 8000e42:	3310      	adds	r3, #16
 8000e44:	6019      	str	r1, [r3, #0]
	/* Set the Peripheral Mode */
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_InitStruct->PINC, ONE_BIT, MDMA_SxCR_PINC_BIT);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	78db      	ldrb	r3, [r3, #3]
 8000e4a:	025b      	lsls	r3, r3, #9
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	7afa      	ldrb	r2, [r7, #11]
 8000e50:	68f9      	ldr	r1, [r7, #12]
 8000e52:	4613      	mov	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	3310      	adds	r3, #16
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e64:	7afa      	ldrb	r2, [r7, #11]
 8000e66:	ea40 0103 	orr.w	r1, r0, r3
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	4403      	add	r3, r0
 8000e76:	3310      	adds	r3, #16
 8000e78:	6019      	str	r1, [r3, #0]
	/* Set the Memory Mode */
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_InitStruct->MINC, ONE_BIT, MDMA_SxCR_MINC_BIT);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	791b      	ldrb	r3, [r3, #4]
 8000e7e:	029b      	lsls	r3, r3, #10
 8000e80:	4618      	mov	r0, r3
 8000e82:	7afa      	ldrb	r2, [r7, #11]
 8000e84:	68f9      	ldr	r1, [r7, #12]
 8000e86:	4613      	mov	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	440b      	add	r3, r1
 8000e90:	3310      	adds	r3, #16
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e98:	7afa      	ldrb	r2, [r7, #11]
 8000e9a:	ea40 0103 	orr.w	r1, r0, r3
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	4403      	add	r3, r0
 8000eaa:	3310      	adds	r3, #16
 8000eac:	6019      	str	r1, [r3, #0]
	/* Set the Priority */
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_InitStruct->PriorityLevel, TWO_BITS, MDMA_SxCR_PL0_BIT);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	795b      	ldrb	r3, [r3, #5]
 8000eb2:	041b      	lsls	r3, r3, #16
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	7afa      	ldrb	r2, [r7, #11]
 8000eb8:	68f9      	ldr	r1, [r7, #12]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3310      	adds	r3, #16
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000ecc:	7afa      	ldrb	r2, [r7, #11]
 8000ece:	ea40 0103 	orr.w	r1, r0, r3
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	4403      	add	r3, r0
 8000ede:	3310      	adds	r3, #16
 8000ee0:	6019      	str	r1, [r3, #0]
	/* Set the Channel */
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_InitStruct->Channel, THREE_BITS, MDMA_SxCR_CHSEL0_BIT);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	799b      	ldrb	r3, [r3, #6]
 8000ee6:	065b      	lsls	r3, r3, #25
 8000ee8:	4618      	mov	r0, r3
 8000eea:	7afa      	ldrb	r2, [r7, #11]
 8000eec:	68f9      	ldr	r1, [r7, #12]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3310      	adds	r3, #16
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8000f00:	7afa      	ldrb	r2, [r7, #11]
 8000f02:	ea40 0103 	orr.w	r1, r0, r3
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	4403      	add	r3, r0
 8000f12:	3310      	adds	r3, #16
 8000f14:	6019      	str	r1, [r3, #0]
	/* Set Peripheral Control */
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_InitStruct->PeripheralControl, ONE_BIT, MDMA_SxCR_PFCTRL_BIT);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	015b      	lsls	r3, r3, #5
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	7afa      	ldrb	r2, [r7, #11]
 8000f20:	68f9      	ldr	r1, [r7, #12]
 8000f22:	4613      	mov	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	440b      	add	r3, r1
 8000f2c:	3310      	adds	r3, #16
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f023 0320 	bic.w	r3, r3, #32
 8000f34:	7afa      	ldrb	r2, [r7, #11]
 8000f36:	ea40 0103 	orr.w	r1, r0, r3
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	4403      	add	r3, r0
 8000f46:	3310      	adds	r3, #16
 8000f48:	6019      	str	r1, [r3, #0]
	/* Set Circular Mode */
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_InitStruct->Circ, ONE_BIT, MDMA_SxCR_CIRC_BIT);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	789b      	ldrb	r3, [r3, #2]
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	4618      	mov	r0, r3
 8000f52:	7afa      	ldrb	r2, [r7, #11]
 8000f54:	68f9      	ldr	r1, [r7, #12]
 8000f56:	4613      	mov	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	440b      	add	r3, r1
 8000f60:	3310      	adds	r3, #16
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f68:	7afa      	ldrb	r2, [r7, #11]
 8000f6a:	ea40 0103 	orr.w	r1, r0, r3
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	4403      	add	r3, r0
 8000f7a:	3310      	adds	r3, #16
 8000f7c:	6019      	str	r1, [r3, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <MDMA_vStart>:
/* i/p arguments: Copy_u8Stream: MDMA_STREAM_<Stream Number> */
/* i/p arguments: A_TransferStruct: Transfer Structure       */
/* o/p arguments: nothing              						 */
/* Desc. : This API Starts Data Transfer Through DMAx        */
/*************************************************************/
void MDMA_vStart(DMA_t* DMAx, u8 Copy_u8Stream, MDMA_TransferStruct* A_TransferStruct) {
 8000f8a:	b480      	push	{r7}
 8000f8c:	b085      	sub	sp, #20
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	460b      	mov	r3, r1
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	72fb      	strb	r3, [r7, #11]
	/* Set the Data Sizes of the Memory and Peripheral */
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_TransferStruct->Size, TWO_BITS, MDMA_SxCR_PSIZE0_BIT);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7a9b      	ldrb	r3, [r3, #10]
 8000f9c:	02db      	lsls	r3, r3, #11
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	7afa      	ldrb	r2, [r7, #11]
 8000fa2:	68f9      	ldr	r1, [r7, #12]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	3310      	adds	r3, #16
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000fb6:	7afa      	ldrb	r2, [r7, #11]
 8000fb8:	ea40 0103 	orr.w	r1, r0, r3
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	4403      	add	r3, r0
 8000fc8:	3310      	adds	r3, #16
 8000fca:	6019      	str	r1, [r3, #0]
	WRITE_BITS(DMAx->S[Copy_u8Stream].CR, A_TransferStruct->Size, TWO_BITS, MDMA_SxCR_MSIZE0_BIT);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	7a9b      	ldrb	r3, [r3, #10]
 8000fd0:	035b      	lsls	r3, r3, #13
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	7afa      	ldrb	r2, [r7, #11]
 8000fd6:	68f9      	ldr	r1, [r7, #12]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3310      	adds	r3, #16
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000fea:	7afa      	ldrb	r2, [r7, #11]
 8000fec:	ea40 0103 	orr.w	r1, r0, r3
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	4403      	add	r3, r0
 8000ffc:	3310      	adds	r3, #16
 8000ffe:	6019      	str	r1, [r3, #0]
	/* Set the Source & Destination & Length */
	DMAx->S[Copy_u8Stream].PAR = (u32)A_TransferStruct->SrcAddr;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	7afb      	ldrb	r3, [r7, #11]
 8001006:	4610      	mov	r0, r2
 8001008:	68f9      	ldr	r1, [r7, #12]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	6018      	str	r0, [r3, #0]
	DMAx->S[Copy_u8Stream].M0AR = (u32)A_TransferStruct->DstAddr;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	7afb      	ldrb	r3, [r7, #11]
 800101e:	4610      	mov	r0, r2
 8001020:	68f9      	ldr	r1, [r7, #12]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	440b      	add	r3, r1
 800102e:	3304      	adds	r3, #4
 8001030:	6018      	str	r0, [r3, #0]
	DMAx->S[Copy_u8Stream].NDTR = A_TransferStruct->Length;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	891b      	ldrh	r3, [r3, #8]
 8001036:	7afa      	ldrb	r2, [r7, #11]
 8001038:	4618      	mov	r0, r3
 800103a:	68f9      	ldr	r1, [r7, #12]
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	440b      	add	r3, r1
 8001046:	3314      	adds	r3, #20
 8001048:	6018      	str	r0, [r3, #0]
	/* DMA Start */
	SET_BIT(DMAx->S[Copy_u8Stream].CR, MDMA_SxCR_EN_BIT);
 800104a:	7afa      	ldrb	r2, [r7, #11]
 800104c:	68f9      	ldr	r1, [r7, #12]
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	440b      	add	r3, r1
 8001058:	3310      	adds	r3, #16
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	7afa      	ldrb	r2, [r7, #11]
 800105e:	f043 0101 	orr.w	r1, r3, #1
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4403      	add	r3, r0
 800106e:	3310      	adds	r3, #16
 8001070:	6019      	str	r1, [r3, #0]
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <MGPIO_vSetPinMode>:
/* i/p arguments: Copy_GPIOPin: MGPIO_PIN00 --> MGPIO_PIN15       */
/* i/p arguments: Copy_u8Mode: MGPIO_MODE_<Mode Type>             */
/* o/p arguments: nothing                                         */
/* Desc. : This API Allows User to Set the mode of a Specific Pin */
/******************************************************************/
void MGPIO_vSetPinMode(GPIO_t* GPIOx, MGPIO_PIN Copy_GPIOPin, u8 Copy_u8Mode) {
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	70fb      	strb	r3, [r7, #3]
 800108a:	4613      	mov	r3, r2
 800108c:	70bb      	strb	r3, [r7, #2]
    /* i/p Validation */
    if (Copy_u8Mode > MGPIO_MODE_ANALOG) { return; /* Do Nothing */ }
 800108e:	78bb      	ldrb	r3, [r7, #2]
 8001090:	2b03      	cmp	r3, #3
 8001092:	d813      	bhi.n	80010bc <MGPIO_vSetPinMode+0x3e>
    WRITE_BITS(GPIOx->MODER, Copy_u8Mode, TWO_BITS, Copy_GPIOPin * 2);
 8001094:	78ba      	ldrb	r2, [r7, #2]
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2103      	movs	r1, #3
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	4013      	ands	r3, r2
 80010b2:	ea40 0203 	orr.w	r2, r0, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	e000      	b.n	80010be <MGPIO_vSetPinMode+0x40>
    if (Copy_u8Mode > MGPIO_MODE_ANALOG) { return; /* Do Nothing */ }
 80010bc:	bf00      	nop
}
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <MGPIO_vSetPinAFDirection>:
/* i/p arguments: Copy_GPIOPin: MGPIO_PIN00 --> MGPIO_PIN15                   */
/* i/p arguments: Copy_GPIOPinDirection: MGPIO_AF00 --> MGPIO_AF15            */
/* o/p arguments: nothing                                                     */
/* Desc. : This API Allows User to Set the Direction of AF for a Specific Pin */
/******************************************************************************/
void MGPIO_vSetPinAFDirection(GPIO_t* GPIOx, MGPIO_PIN Copy_GPIOPin, MGPIO_AF Copy_GPIOAFDir) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
 80010d4:	4613      	mov	r3, r2
 80010d6:	70bb      	strb	r3, [r7, #2]
    if (Copy_GPIOPin <= MGPIO_PIN07) { WRITE_BITS(GPIOx->AFRL, Copy_GPIOAFDir, FOUR_BITS, Copy_GPIOPin * 4); }
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	2b07      	cmp	r3, #7
 80010dc:	d813      	bhi.n	8001106 <MGPIO_vSetPinAFDirection+0x3e>
 80010de:	78ba      	ldrb	r2, [r7, #2]
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	4618      	mov	r0, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1a      	ldr	r2, [r3, #32]
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	210f      	movs	r1, #15
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	4013      	ands	r3, r2
 80010fc:	ea40 0203 	orr.w	r2, r0, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	621a      	str	r2, [r3, #32]
    else		 					 { WRITE_BITS(GPIOx->AFRH, Copy_GPIOAFDir, FOUR_BITS, (Copy_GPIOPin - 8) * 4); }
}
 8001104:	e014      	b.n	8001130 <MGPIO_vSetPinAFDirection+0x68>
    else		 					 { WRITE_BITS(GPIOx->AFRH, Copy_GPIOAFDir, FOUR_BITS, (Copy_GPIOPin - 8) * 4); }
 8001106:	78ba      	ldrb	r2, [r7, #2]
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	3b08      	subs	r3, #8
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	3b08      	subs	r3, #8
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	210f      	movs	r1, #15
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	4013      	ands	r3, r2
 8001128:	ea40 0203 	orr.w	r2, r0, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <MGPT_vPWMInit>:
/* i/p arguments: GPTx: TIM2 --> TIM5 ONLY                     */
/* i/p arguments: A_InitStruct: Initialization Structure       */
/* o/p arguments: nothing                                      */
/* Desc. : This API Initializes the Selected Timer to PWM Mode */
/***************************************************************/
void MGPT_vPWMInit(GPT_t* GPTx, MGPT_PWMInitTypeDef* A_InitStruct) {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	/* CLEAR CCxS[1:0] BITS
	 * SET THE POLARITY OF THE OUTPUT
	 * SET THE PWM MODE
	 * SET THE PRESCALER
	 * ENABLE PRELOAD */
	switch (A_InitStruct->Channel) {
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b03      	cmp	r3, #3
 800114c:	f200 80d4 	bhi.w	80012f8 <MGPT_vPWMInit+0x1bc>
 8001150:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <MGPT_vPWMInit+0x1c>)
 8001152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001156:	bf00      	nop
 8001158:	08001169 	.word	0x08001169
 800115c:	080011cd 	.word	0x080011cd
 8001160:	08001231 	.word	0x08001231
 8001164:	08001295 	.word	0x08001295
		case MGPT_CHANNEL_1: WRITE_BITS(GPTx->CCMR[0], 0b00, TWO_BITS, MGPT_CCMR1_CC1S_BIT);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f023 0203 	bic.w	r2, r3, #3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
							 if (A_InitStruct->Polarity) { SET_BIT(GPTx->CCER, MGPT_CCER_CC1P_BIT); }
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	7b1b      	ldrb	r3, [r3, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d006      	beq.n	800118a <MGPT_vPWMInit+0x4e>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	f043 0202 	orr.w	r2, r3, #2
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	621a      	str	r2, [r3, #32]
 8001188:	e005      	b.n	8001196 <MGPT_vPWMInit+0x5a>
							 else 	 					 { CLR_BIT(GPTx->CCER, MGPT_CCER_CC1P_BIT); }
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	f023 0202 	bic.w	r2, r3, #2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	621a      	str	r2, [r3, #32]
							 WRITE_BITS(GPTx->CCMR[0], A_InitStruct->PWMMode, THREE_BITS, MGPT_CCMR1_OC1M0_BIT);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	785b      	ldrb	r3, [r3, #1]
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	619a      	str	r2, [r3, #24]
							 GPTx->PSC = (u32)A_InitStruct->Prescaler - 1;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	891b      	ldrh	r3, [r3, #8]
 80011b0:	1e5a      	subs	r2, r3, #1
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	629a      	str	r2, [r3, #40]	; 0x28
							 GPTx->ARR = A_InitStruct->Period;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
							 SET_BIT(GPTx->CCMR[0], MGPT_CCMR1_OC1PE_BIT);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	f043 0208 	orr.w	r2, r3, #8
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	619a      	str	r2, [r3, #24]
							 break;
 80011ca:	e096      	b.n	80012fa <MGPT_vPWMInit+0x1be>

		case MGPT_CHANNEL_2: WRITE_BITS(GPTx->CCMR[0], 0b00, TWO_BITS, MGPT_CCMR1_CC2S_BIT);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
							 if (A_InitStruct->Polarity) { SET_BIT(GPTx->CCER, MGPT_CCER_CC2P_BIT); }
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	7b1b      	ldrb	r3, [r3, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <MGPT_vPWMInit+0xb2>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	f043 0220 	orr.w	r2, r3, #32
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	621a      	str	r2, [r3, #32]
 80011ec:	e005      	b.n	80011fa <MGPT_vPWMInit+0xbe>
							 else 	 					 { CLR_BIT(GPTx->CCER, MGPT_CCER_CC2P_BIT); }
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	f023 0220 	bic.w	r2, r3, #32
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	621a      	str	r2, [r3, #32]
							 WRITE_BITS(GPTx->CCMR[0], A_InitStruct->PWMMode, THREE_BITS, MGPT_CCMR1_OC2M0_BIT);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	785b      	ldrb	r3, [r3, #1]
 80011fe:	031b      	lsls	r3, r3, #12
 8001200:	461a      	mov	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	619a      	str	r2, [r3, #24]
							 GPTx->PSC = (u32)A_InitStruct->Prescaler;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	891b      	ldrh	r3, [r3, #8]
 8001214:	461a      	mov	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	629a      	str	r2, [r3, #40]	; 0x28
							 GPTx->ARR = A_InitStruct->Period;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	62da      	str	r2, [r3, #44]	; 0x2c
							 SET_BIT(GPTx->CCMR[0], MGPT_CCMR1_OC2PE_BIT);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	619a      	str	r2, [r3, #24]
							 break;
 800122e:	e064      	b.n	80012fa <MGPT_vPWMInit+0x1be>

		case MGPT_CHANNEL_3: WRITE_BITS(GPTx->CCMR[1], 0b00, TWO_BITS, MGPT_CCMR2_CC3S_BIT);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	f023 0203 	bic.w	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	61da      	str	r2, [r3, #28]
							 if (A_InitStruct->Polarity) { SET_BIT(GPTx->CCER, MGPT_CCER_CC3P_BIT); }
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	7b1b      	ldrb	r3, [r3, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <MGPT_vPWMInit+0x116>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	621a      	str	r2, [r3, #32]
 8001250:	e005      	b.n	800125e <MGPT_vPWMInit+0x122>
							 else 	 					 { CLR_BIT(GPTx->CCER, MGPT_CCER_CC3P_BIT); }
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	621a      	str	r2, [r3, #32]
							 WRITE_BITS(GPTx->CCMR[1], A_InitStruct->PWMMode, THREE_BITS, MGPT_CCMR2_OC3M0_BIT);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	785b      	ldrb	r3, [r3, #1]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800126e:	431a      	orrs	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	61da      	str	r2, [r3, #28]
							 GPTx->PSC = (u32)A_InitStruct->Prescaler;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	891b      	ldrh	r3, [r3, #8]
 8001278:	461a      	mov	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
							 GPTx->ARR = A_InitStruct->Period;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	62da      	str	r2, [r3, #44]	; 0x2c
							 SET_BIT(GPTx->CCMR[1], MGPT_CCMR2_OC3PE_BIT);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f043 0208 	orr.w	r2, r3, #8
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	61da      	str	r2, [r3, #28]
							 break;
 8001292:	e032      	b.n	80012fa <MGPT_vPWMInit+0x1be>

		case MGPT_CHANNEL_4: WRITE_BITS(GPTx->CCMR[1], 0b00, TWO_BITS, MGPT_CCMR2_CC4S_BIT);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	61da      	str	r2, [r3, #28]
							 if (A_InitStruct->Polarity) { SET_BIT(GPTx->CCER, MGPT_CCER_CC4P_BIT); }
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	7b1b      	ldrb	r3, [r3, #12]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d006      	beq.n	80012b6 <MGPT_vPWMInit+0x17a>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	621a      	str	r2, [r3, #32]
 80012b4:	e005      	b.n	80012c2 <MGPT_vPWMInit+0x186>
							 else 	 					 { CLR_BIT(GPTx->CCER, MGPT_CCER_CC4P_BIT); }
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	621a      	str	r2, [r3, #32]
							 WRITE_BITS(GPTx->CCMR[1], A_InitStruct->PWMMode, THREE_BITS, MGPT_CCMR2_OC4M0_BIT);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	785b      	ldrb	r3, [r3, #1]
 80012c6:	031b      	lsls	r3, r3, #12
 80012c8:	461a      	mov	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	61da      	str	r2, [r3, #28]
							 GPTx->PSC = (u32)A_InitStruct->Prescaler;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	891b      	ldrh	r3, [r3, #8]
 80012dc:	461a      	mov	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28
							 GPTx->ARR = A_InitStruct->Period;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
							 SET_BIT(GPTx->CCMR[1], MGPT_CCMR2_OC4PE_BIT);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	61da      	str	r2, [r3, #28]
							 break;
 80012f6:	e000      	b.n	80012fa <MGPT_vPWMInit+0x1be>
		default: break;
 80012f8:	bf00      	nop
	}
	/* ENABLE AUTO-RELOAD PRELOAD */
	SET_BIT(GPTx->CR1, MGPT_CR1_ARPE_BIT);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]
	/* SET COUNTING MODE AND DIRECTION */
	WRITE_BITS(GPTx->CR1, A_InitStruct->CountingMode, TWO_BITS, MGPT_CR1_CMS0_BIT);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	7a9b      	ldrb	r3, [r3, #10]
 800130a:	015b      	lsls	r3, r3, #5
 800130c:	461a      	mov	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	601a      	str	r2, [r3, #0]
	if (!A_InitStruct->CountingMode) {
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	7a9b      	ldrb	r3, [r3, #10]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d110      	bne.n	8001346 <MGPT_vPWMInit+0x20a>
		if (A_InitStruct->Direction) { SET_BIT(GPTx->CR1, MGPT_CR1_DIR_BIT); }
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	7adb      	ldrb	r3, [r3, #11]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <MGPT_vPWMInit+0x1fe>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f043 0210 	orr.w	r2, r3, #16
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e005      	b.n	8001346 <MGPT_vPWMInit+0x20a>
		else						 { CLR_BIT(GPTx->CR1, MGPT_CR1_DIR_BIT); }
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 0210 	bic.w	r2, r3, #16
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	601a      	str	r2, [r3, #0]
	}
	/* ENABLE CAPTURE/COMPARE OUTPUT */
	switch (A_InitStruct->Channel) {
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b03      	cmp	r3, #3
 800134c:	d826      	bhi.n	800139c <MGPT_vPWMInit+0x260>
 800134e:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <MGPT_vPWMInit+0x218>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	08001365 	.word	0x08001365
 8001358:	08001373 	.word	0x08001373
 800135c:	08001381 	.word	0x08001381
 8001360:	0800138f 	.word	0x0800138f
		case MGPT_CHANNEL_1: SET_BIT(GPTx->CCER, MGPT_CCER_CC1E_BIT); break;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	f043 0201 	orr.w	r2, r3, #1
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	621a      	str	r2, [r3, #32]
 8001370:	e015      	b.n	800139e <MGPT_vPWMInit+0x262>
		case MGPT_CHANNEL_2: SET_BIT(GPTx->CCER, MGPT_CCER_CC2E_BIT); break;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	f043 0210 	orr.w	r2, r3, #16
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	621a      	str	r2, [r3, #32]
 800137e:	e00e      	b.n	800139e <MGPT_vPWMInit+0x262>
		case MGPT_CHANNEL_3: SET_BIT(GPTx->CCER, MGPT_CCER_CC3E_BIT); break;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	621a      	str	r2, [r3, #32]
 800138c:	e007      	b.n	800139e <MGPT_vPWMInit+0x262>
		case MGPT_CHANNEL_4: SET_BIT(GPTx->CCER, MGPT_CCER_CC4E_BIT); break;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	621a      	str	r2, [r3, #32]
 800139a:	e000      	b.n	800139e <MGPT_vPWMInit+0x262>
		default: break;
 800139c:	bf00      	nop
	}
	/* ENABLE COUNTER */
	SET_BIT(GPTx->CR1, MGPT_CR1_CEN_BIT);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f043 0201 	orr.w	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	601a      	str	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop

080013b8 <MGPT_vSetPWMDutyCycle>:
/* i/p arguments: Copy_u8Channel: MGPT_CHANNEL_<Number>					  */
/* i/p arguments: Copy_u32DutyCycle: Duty Cycle                           */
/* o/p arguments: nothing                                                 */
/* Desc. : This API Sets the Duty Cycle of the Selected Timer in PWM Mode */
/**************************************************************************/
void MGPT_vSetPWMDutyCycle(GPT_t* GPTx, u8 Copy_u8Channel, u32 Copy_u32DutyCycle) {
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	460b      	mov	r3, r1
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	72fb      	strb	r3, [r7, #11]
	GPTx->CCR[Copy_u8Channel] = Copy_u32DutyCycle;
 80013c6:	7afb      	ldrb	r3, [r7, #11]
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	330c      	adds	r3, #12
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	605a      	str	r2, [r3, #4]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <TIM2_IRQHandler>:


/**********************************************/
/*             INTERRUPT HANDLERS             */
/**********************************************/
void TIM2_IRQHandler(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	GPT2->SR = 0;
 80013e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
	GPT2->CNT = 0;
 80013ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013f0:	2200      	movs	r2, #0
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
	MGPT_CALLBACKS[0]();
 80013f4:	4b02      	ldr	r3, [pc, #8]	; (8001400 <TIM2_IRQHandler+0x20>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4798      	blx	r3
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000001c 	.word	0x2000001c

08001404 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	GPT3->SR = 0;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <TIM3_IRQHandler+0x14>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
	MGPT_CALLBACKS[1]();
 800140e:	4b03      	ldr	r3, [pc, #12]	; (800141c <TIM3_IRQHandler+0x18>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4798      	blx	r3
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40000400 	.word	0x40000400
 800141c:	2000001c 	.word	0x2000001c

08001420 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	GPT4->SR = 0;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <TIM4_IRQHandler+0x14>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
	MGPT_CALLBACKS[2]();
 800142a:	4b03      	ldr	r3, [pc, #12]	; (8001438 <TIM4_IRQHandler+0x18>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	4798      	blx	r3
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40000800 	.word	0x40000800
 8001438:	2000001c 	.word	0x2000001c

0800143c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	GPT5->SR = 0;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <TIM5_IRQHandler+0x14>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
	MGPT_CALLBACKS[3]();
 8001446:	4b03      	ldr	r3, [pc, #12]	; (8001454 <TIM5_IRQHandler+0x18>)
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	4798      	blx	r3
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40000c00 	.word	0x40000c00
 8001454:	2000001c 	.word	0x2000001c

08001458 <MNVIC_vInit>:
/* Func. Name: MNVIC_vInit           */
/* i/p arguments: Nothing            */
/* o/p arguments: Nothing            */
/* Desc. : This API initializes NVIC */
/*************************************/
void MNVIC_vInit(void) {
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
	SCB_AIRCR = VECT_KEY | (_MNVIC_PRIORITY_CONFIGURATION_ << 8);
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <MNVIC_vInit+0x14>)
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <MNVIC_vInit+0x18>)
 8001460:	601a      	str	r2, [r3, #0]
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed0c 	.word	0xe000ed0c
 8001470:	05fa0500 	.word	0x05fa0500

08001474 <MRCC_vInitSysAndBusClock>:
/* Func. Name: MRCC_vInitSysAndBusClock 						  */
/* i/p arguments: nothing              	   						  */
/* o/p arguments: nothing              							  */
/* Desc. : This API Initializes the The System CLK and Busses CLK */
/******************************************************************/
void MRCC_vInitSysAndBusClock() {
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
	#if MRCC_SYSTEM_CLOCK_SOURCE == MRCC_HSI_CLK_SOURCE
		/* Enable HSI */
		SET_BIT(RCC_CR, MRCC_CR_HSION_BIT);
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <MRCC_vInitSysAndBusClock+0x6c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a18      	ldr	r2, [pc, #96]	; (80014e0 <MRCC_vInitSysAndBusClock+0x6c>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6013      	str	r3, [r2, #0]
		/* Trim HSI */
		WRITE_BITS(RCC_CR, MRCC_HSI_TRIMMING, FIVE_BITS, MRCC_CR_HSITRIM_BIT);
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <MRCC_vInitSysAndBusClock+0x6c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800148c:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <MRCC_vInitSysAndBusClock+0x6c>)
 800148e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001492:	6013      	str	r3, [r2, #0]
		/* Switch System Clock to HSI */
		WRITE_BITS(RCC_CFGR, MRCC_SW_SWITCH_TO_HSI, TWO_BITS, MRCC_CFGR_SW_BIT);
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MRCC_vInitSysAndBusClock+0x70>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <MRCC_vInitSysAndBusClock+0x70>)
 800149a:	f023 0303 	bic.w	r3, r3, #3
 800149e:	6013      	str	r3, [r2, #0]
		/* booling till HSI is Stable */
		while(!GET_BIT(RCC_CR, MRCC_CR_HSIRDY_BIT));
 80014a0:	bf00      	nop
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <MRCC_vInitSysAndBusClock+0x6c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f9      	beq.n	80014a2 <MRCC_vInitSysAndBusClock+0x2e>
		while(!GET_BIT(RCC_CR, MRCC_CR_PLLRDY_BIT));
	#else
		#warning "Invalid Clock Source Configuration!"
	#endif
	/* Set the AHB Prescaler */
	WRITE_BITS(RCC_CFGR, MRCC_AHB_PRESCALER, FOUR_BITS, MRCC_CFGR_HPRE_BIT);
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <MRCC_vInitSysAndBusClock+0x70>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <MRCC_vInitSysAndBusClock+0x70>)
 80014b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014bc:	6013      	str	r3, [r2, #0]
	/* Set the APB1 Prescaler */
	WRITE_BITS(RCC_CFGR, MRCC_APB1_PRESCALER, THREE_BITS, MRCC_CFGR_PPRE1_BIT);
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MRCC_vInitSysAndBusClock+0x70>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <MRCC_vInitSysAndBusClock+0x70>)
 80014c4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80014c8:	6013      	str	r3, [r2, #0]
	/* Set the APB2 Prescaler */
	WRITE_BITS(RCC_CFGR, MRCC_APB2_PRESCALER, THREE_BITS, MRCC_CFGR_PPRE2_BIT);
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MRCC_vInitSysAndBusClock+0x70>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <MRCC_vInitSysAndBusClock+0x70>)
 80014d0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014d4:	6013      	str	r3, [r2, #0]
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40023808 	.word	0x40023808

080014e8 <MRCC_vEnablePeriphClock>:
/* i/p arguments: Copy_BusID: MRCC_BUS_AHB1 -->  MRCC_BUS_APB2LP             */
/* i/p arguments: Copy_PeriphID: <PeripheralName>EN || <PeripheralName>LPEN  */
/* o/p arguments: nothing                                                    */
/* Desc. : This API Allows the User to Enable CLK for a Specific Peripheral  */
/*****************************************************************************/
void MRCC_vEnablePeriphClock(MRCC_BUS Copy_BusID, MRCC_PeriphClock Copy_PeriphID) {
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	460a      	mov	r2, r1
 80014f2:	71fb      	strb	r3, [r7, #7]
 80014f4:	4613      	mov	r3, r2
 80014f6:	71bb      	strb	r3, [r7, #6]
	switch (Copy_BusID) {
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	2b07      	cmp	r3, #7
 80014fc:	d86a      	bhi.n	80015d4 <MRCC_vEnablePeriphClock+0xec>
 80014fe:	a201      	add	r2, pc, #4	; (adr r2, 8001504 <MRCC_vEnablePeriphClock+0x1c>)
 8001500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001504:	08001525 	.word	0x08001525
 8001508:	0800153b 	.word	0x0800153b
 800150c:	08001551 	.word	0x08001551
 8001510:	08001567 	.word	0x08001567
 8001514:	0800157d 	.word	0x0800157d
 8001518:	08001593 	.word	0x08001593
 800151c:	080015a9 	.word	0x080015a9
 8001520:	080015bf 	.word	0x080015bf
		case MRCC_BUS_AHB1:   SET_BIT(RCC_AHB1ENR, Copy_PeriphID);   break;
 8001524:	4b2f      	ldr	r3, [pc, #188]	; (80015e4 <MRCC_vEnablePeriphClock+0xfc>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	79ba      	ldrb	r2, [r7, #6]
 800152a:	2101      	movs	r1, #1
 800152c:	fa01 f202 	lsl.w	r2, r1, r2
 8001530:	4611      	mov	r1, r2
 8001532:	4a2c      	ldr	r2, [pc, #176]	; (80015e4 <MRCC_vEnablePeriphClock+0xfc>)
 8001534:	430b      	orrs	r3, r1
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e04d      	b.n	80015d6 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_AHB2:   SET_BIT(RCC_AHB2ENR, Copy_PeriphID);   break;
 800153a:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <MRCC_vEnablePeriphClock+0x100>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	79ba      	ldrb	r2, [r7, #6]
 8001540:	2101      	movs	r1, #1
 8001542:	fa01 f202 	lsl.w	r2, r1, r2
 8001546:	4611      	mov	r1, r2
 8001548:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <MRCC_vEnablePeriphClock+0x100>)
 800154a:	430b      	orrs	r3, r1
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e042      	b.n	80015d6 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB1:   SET_BIT(RCC_APB1ENR, Copy_PeriphID);   break;
 8001550:	4b26      	ldr	r3, [pc, #152]	; (80015ec <MRCC_vEnablePeriphClock+0x104>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	79ba      	ldrb	r2, [r7, #6]
 8001556:	2101      	movs	r1, #1
 8001558:	fa01 f202 	lsl.w	r2, r1, r2
 800155c:	4611      	mov	r1, r2
 800155e:	4a23      	ldr	r2, [pc, #140]	; (80015ec <MRCC_vEnablePeriphClock+0x104>)
 8001560:	430b      	orrs	r3, r1
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	e037      	b.n	80015d6 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB2:   SET_BIT(RCC_APB2ENR, Copy_PeriphID);   break;
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <MRCC_vEnablePeriphClock+0x108>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	79ba      	ldrb	r2, [r7, #6]
 800156c:	2101      	movs	r1, #1
 800156e:	fa01 f202 	lsl.w	r2, r1, r2
 8001572:	4611      	mov	r1, r2
 8001574:	4a1e      	ldr	r2, [pc, #120]	; (80015f0 <MRCC_vEnablePeriphClock+0x108>)
 8001576:	430b      	orrs	r3, r1
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e02c      	b.n	80015d6 <MRCC_vEnablePeriphClock+0xee>
		case MRCC_BUS_AHB1LP: SET_BIT(RCC_AHB1LPENR, Copy_PeriphID); break;
 800157c:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <MRCC_vEnablePeriphClock+0x10c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	79ba      	ldrb	r2, [r7, #6]
 8001582:	2101      	movs	r1, #1
 8001584:	fa01 f202 	lsl.w	r2, r1, r2
 8001588:	4611      	mov	r1, r2
 800158a:	4a1a      	ldr	r2, [pc, #104]	; (80015f4 <MRCC_vEnablePeriphClock+0x10c>)
 800158c:	430b      	orrs	r3, r1
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	e021      	b.n	80015d6 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_AHB2LP: SET_BIT(RCC_AHB2LPENR, Copy_PeriphID); break;
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <MRCC_vEnablePeriphClock+0x110>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	79ba      	ldrb	r2, [r7, #6]
 8001598:	2101      	movs	r1, #1
 800159a:	fa01 f202 	lsl.w	r2, r1, r2
 800159e:	4611      	mov	r1, r2
 80015a0:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <MRCC_vEnablePeriphClock+0x110>)
 80015a2:	430b      	orrs	r3, r1
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e016      	b.n	80015d6 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB1LP: SET_BIT(RCC_APB1LPENR, Copy_PeriphID); break;
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <MRCC_vEnablePeriphClock+0x114>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	79ba      	ldrb	r2, [r7, #6]
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	4611      	mov	r1, r2
 80015b6:	4a11      	ldr	r2, [pc, #68]	; (80015fc <MRCC_vEnablePeriphClock+0x114>)
 80015b8:	430b      	orrs	r3, r1
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	e00b      	b.n	80015d6 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB2LP: SET_BIT(RCC_APB2LPENR, Copy_PeriphID); break;
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <MRCC_vEnablePeriphClock+0x118>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	79ba      	ldrb	r2, [r7, #6]
 80015c4:	2101      	movs	r1, #1
 80015c6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ca:	4611      	mov	r1, r2
 80015cc:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <MRCC_vEnablePeriphClock+0x118>)
 80015ce:	430b      	orrs	r3, r1
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e000      	b.n	80015d6 <MRCC_vEnablePeriphClock+0xee>
        default: break;
 80015d4:	bf00      	nop
    }
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023830 	.word	0x40023830
 80015e8:	40023834 	.word	0x40023834
 80015ec:	40023840 	.word	0x40023840
 80015f0:	40023844 	.word	0x40023844
 80015f4:	40023850 	.word	0x40023850
 80015f8:	40023854 	.word	0x40023854
 80015fc:	40023860 	.word	0x40023860
 8001600:	40023864 	.word	0x40023864

08001604 <SysTick_Handler>:
/* Func. Name: SysTick_Handler           */
/* i/p arguments: nothing                */
/* o/p arguments: nothing                */
/* Desc. : This API is SysTick Interrupt */
/*****************************************/
void SysTick_Handler() {
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
    if (Global_u8CallMode == MSTK_SINGLE_CALL_MODE) {
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <SysTick_Handler+0x48>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d111      	bne.n	8001634 <SysTick_Handler+0x30>
        /* Disable INT */
        CLR_BIT(STK_CTRL,MSTK_CTRL_TICKINT_BIT);
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <SysTick_Handler+0x4c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <SysTick_Handler+0x4c>)
 8001616:	f023 0302 	bic.w	r3, r3, #2
 800161a:	6013      	str	r3, [r2, #0]
        /* Stop the Timer */
        CLR_BIT(STK_CTRL,MSTK_CTRL_ENABLE_BIT);
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <SysTick_Handler+0x4c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <SysTick_Handler+0x4c>)
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	6013      	str	r3, [r2, #0]
        STK_LOAD = 0;
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <SysTick_Handler+0x50>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
        STK_VAL = 0;
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <SysTick_Handler+0x54>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
    }
    if (MSTK_CallBack != NULL) { MSTK_CallBack(); }
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <SysTick_Handler+0x58>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <SysTick_Handler+0x3e>
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <SysTick_Handler+0x58>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4798      	blx	r3
    /* Clear Flag */
    (void)GET_BIT(STK_CTRL,MSTK_CTRL_COUNTFLAG_BIT);
 8001642:	4b03      	ldr	r3, [pc, #12]	; (8001650 <SysTick_Handler+0x4c>)
 8001644:	681b      	ldr	r3, [r3, #0]
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000030 	.word	0x20000030
 8001650:	e000e010 	.word	0xe000e010
 8001654:	e000e014 	.word	0xe000e014
 8001658:	e000e018 	.word	0xe000e018
 800165c:	2000002c 	.word	0x2000002c

08001660 <MUSART_vInit>:
/* i/p arguemnts: A_ClockInitStruct: Contains the USART Clock Settings */
/* i/p arguemnts: USARTx: USART1, USART2, USART6    				   */
/* o/p arguments: nothing                              				   */
/* Desc. : This API initializes USARTx with Specifications 			   */
/***********************************************************************/
void MUSART_vInit(USART_t* USARTx, MUSART_InitTypeDef* A_InitStruct, MUSART_ClockInitTypeDef* A_ClockInitStruct) {
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
	/* Set The Baudrate */
	switch (A_InitStruct->Oversampling)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	7a9b      	ldrb	r3, [r3, #10]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <MUSART_vInit+0x1a>
 8001674:	2b01      	cmp	r3, #1
 8001676:	d072      	beq.n	800175e <MUSART_vInit+0xfe>
 8001678:	e0e1      	b.n	800183e <MUSART_vInit+0x1de>
	{
		case MUSART_OVER_SAMPLING_16: USARTx->BRR = MUSART_BRR_SAMPLING16(__MUSART_PCLK__, A_InitStruct->BaudRate); break;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe feec 	bl	800045c <__aeabi_ui2d>
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	4b8f      	ldr	r3, [pc, #572]	; (80018c8 <MUSART_vInit+0x268>)
 800168a:	f7fe ff61 	bl	8000550 <__aeabi_dmul>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	a18b      	add	r1, pc, #556	; (adr r1, 80018c0 <MUSART_vInit+0x260>)
 8001694:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001698:	f7ff f884 	bl	80007a4 <__aeabi_ddiv>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff f966 	bl	8000974 <__aeabi_d2uiz>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a88      	ldr	r2, [pc, #544]	; (80018cc <MUSART_vInit+0x26c>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	095b      	lsrs	r3, r3, #5
 80016b2:	011c      	lsls	r4, r3, #4
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe fecf 	bl	800045c <__aeabi_ui2d>
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	4b81      	ldr	r3, [pc, #516]	; (80018c8 <MUSART_vInit+0x268>)
 80016c4:	f7fe ff44 	bl	8000550 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	a17c      	add	r1, pc, #496	; (adr r1, 80018c0 <MUSART_vInit+0x260>)
 80016ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016d2:	f7ff f867 	bl	80007a4 <__aeabi_ddiv>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff f949 	bl	8000974 <__aeabi_d2uiz>
 80016e2:	4602      	mov	r2, r0
 80016e4:	4b79      	ldr	r3, [pc, #484]	; (80018cc <MUSART_vInit+0x26c>)
 80016e6:	fba3 1302 	umull	r1, r3, r3, r2
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2164      	movs	r1, #100	; 0x64
 80016ee:	fb01 f303 	mul.w	r3, r1, r3
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	3332      	adds	r3, #50	; 0x32
 80016f8:	4a74      	ldr	r2, [pc, #464]	; (80018cc <MUSART_vInit+0x26c>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001704:	441c      	add	r4, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe fea6 	bl	800045c <__aeabi_ui2d>
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	4b6c      	ldr	r3, [pc, #432]	; (80018c8 <MUSART_vInit+0x268>)
 8001716:	f7fe ff1b 	bl	8000550 <__aeabi_dmul>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	a168      	add	r1, pc, #416	; (adr r1, 80018c0 <MUSART_vInit+0x260>)
 8001720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001724:	f7ff f83e 	bl	80007a4 <__aeabi_ddiv>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f7ff f920 	bl	8000974 <__aeabi_d2uiz>
 8001734:	4602      	mov	r2, r0
 8001736:	4b65      	ldr	r3, [pc, #404]	; (80018cc <MUSART_vInit+0x26c>)
 8001738:	fba3 1302 	umull	r1, r3, r3, r2
 800173c:	095b      	lsrs	r3, r3, #5
 800173e:	2164      	movs	r1, #100	; 0x64
 8001740:	fb01 f303 	mul.w	r3, r1, r3
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	011b      	lsls	r3, r3, #4
 8001748:	3332      	adds	r3, #50	; 0x32
 800174a:	4a60      	ldr	r2, [pc, #384]	; (80018cc <MUSART_vInit+0x26c>)
 800174c:	fba2 2303 	umull	r2, r3, r2, r3
 8001750:	095b      	lsrs	r3, r3, #5
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	18e2      	adds	r2, r4, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	e06f      	b.n	800183e <MUSART_vInit+0x1de>
		case MUSART_OVER_SAMPLING_8:  USARTx->BRR = MUSART_BRR_SAMPLING8(__MUSART_PCLK__, A_InitStruct->BaudRate);  break;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fe7a 	bl	800045c <__aeabi_ui2d>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	f7fe fd3a 	bl	80001e4 <__adddf3>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	a152      	add	r1, pc, #328	; (adr r1, 80018c0 <MUSART_vInit+0x260>)
 8001776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800177a:	f7ff f813 	bl	80007a4 <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff f8f5 	bl	8000974 <__aeabi_d2uiz>
 800178a:	4603      	mov	r3, r0
 800178c:	4a4f      	ldr	r2, [pc, #316]	; (80018cc <MUSART_vInit+0x26c>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	011c      	lsls	r4, r3, #4
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fe5e 	bl	800045c <__aeabi_ui2d>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	f7fe fd1e 	bl	80001e4 <__adddf3>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	a144      	add	r1, pc, #272	; (adr r1, 80018c0 <MUSART_vInit+0x260>)
 80017ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017b2:	f7fe fff7 	bl	80007a4 <__aeabi_ddiv>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff f8d9 	bl	8000974 <__aeabi_d2uiz>
 80017c2:	4602      	mov	r2, r0
 80017c4:	4b41      	ldr	r3, [pc, #260]	; (80018cc <MUSART_vInit+0x26c>)
 80017c6:	fba3 1302 	umull	r1, r3, r3, r2
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2164      	movs	r1, #100	; 0x64
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	3332      	adds	r3, #50	; 0x32
 80017d8:	4a3c      	ldr	r2, [pc, #240]	; (80018cc <MUSART_vInit+0x26c>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80017e6:	441c      	add	r4, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fe35 	bl	800045c <__aeabi_ui2d>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	f7fe fcf5 	bl	80001e4 <__adddf3>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	a130      	add	r1, pc, #192	; (adr r1, 80018c0 <MUSART_vInit+0x260>)
 8001800:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001804:	f7fe ffce 	bl	80007a4 <__aeabi_ddiv>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff f8b0 	bl	8000974 <__aeabi_d2uiz>
 8001814:	4602      	mov	r2, r0
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <MUSART_vInit+0x26c>)
 8001818:	fba3 1302 	umull	r1, r3, r3, r2
 800181c:	095b      	lsrs	r3, r3, #5
 800181e:	2164      	movs	r1, #100	; 0x64
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	3332      	adds	r3, #50	; 0x32
 800182a:	4a28      	ldr	r2, [pc, #160]	; (80018cc <MUSART_vInit+0x26c>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	095b      	lsrs	r3, r3, #5
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	18e2      	adds	r2, r4, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	bf00      	nop
	}
	/* Set The Control Register */
	USARTx->CR1 = (A_InitStruct->Oversampling << MUSART_CR1_OVER8_BIT)     |
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	7a9b      	ldrb	r3, [r3, #10]
 8001842:	03da      	lsls	r2, r3, #15
			      (A_InitStruct->HardwareFlowControl << MUSART_CR1_UE_BIT) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	7a5b      	ldrb	r3, [r3, #9]
 8001848:	035b      	lsls	r3, r3, #13
	USARTx->CR1 = (A_InitStruct->Oversampling << MUSART_CR1_OVER8_BIT)     |
 800184a:	431a      	orrs	r2, r3
				  (A_InitStruct->DataWidth << MUSART_CR1_M_BIT)            |
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	791b      	ldrb	r3, [r3, #4]
 8001850:	031b      	lsls	r3, r3, #12
			      (A_InitStruct->HardwareFlowControl << MUSART_CR1_UE_BIT) |
 8001852:	431a      	orrs	r2, r3
				  (A_InitStruct->Parity_Enable << MUSART_CR1_PCE_BIT)      |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	799b      	ldrb	r3, [r3, #6]
 8001858:	029b      	lsls	r3, r3, #10
				  (A_InitStruct->DataWidth << MUSART_CR1_M_BIT)            |
 800185a:	431a      	orrs	r2, r3
				  (A_InitStruct->Parity_Selection << MUSART_CR1_PS_BIT)    ;
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	79db      	ldrb	r3, [r3, #7]
 8001860:	025b      	lsls	r3, r3, #9
				  (A_InitStruct->Parity_Enable << MUSART_CR1_PCE_BIT)      |
 8001862:	4313      	orrs	r3, r2
 8001864:	461a      	mov	r2, r3
	USARTx->CR1 = (A_InitStruct->Oversampling << MUSART_CR1_OVER8_BIT)     |
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	60da      	str	r2, [r3, #12]
	/* Set The Direction of Transferring Data */
	WRITE_BITS(USARTx->CR1, A_InitStruct->TransferDirection, TWO_BITS, MUSART_CR1_RE_BIT);
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	7a1b      	ldrb	r3, [r3, #8]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	461a      	mov	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f023 030c 	bic.w	r3, r3, #12
 800187a:	431a      	orrs	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	60da      	str	r2, [r3, #12]
	/* Set The Second Control Register */
	USARTx->CR2 =   (A_InitStruct->StopBits << MUSART_CR2_STOP_BIT)				   |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	795b      	ldrb	r3, [r3, #5]
 8001884:	031a      	lsls	r2, r3, #12
					(A_ClockInitStruct->ClockOutput << MUSART_CR2_CLKEN_BIT)       |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	02db      	lsls	r3, r3, #11
	USARTx->CR2 =   (A_InitStruct->StopBits << MUSART_CR2_STOP_BIT)				   |
 800188c:	431a      	orrs	r2, r3
					(A_ClockInitStruct->ClockPhase << MUSART_CR2_CPHA_BIT)         |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	789b      	ldrb	r3, [r3, #2]
 8001892:	025b      	lsls	r3, r3, #9
					(A_ClockInitStruct->ClockOutput << MUSART_CR2_CLKEN_BIT)       |
 8001894:	431a      	orrs	r2, r3
					(A_ClockInitStruct->ClockPolarity << MUSART_CR2_CPOL_BIT)      |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	785b      	ldrb	r3, [r3, #1]
 800189a:	029b      	lsls	r3, r3, #10
					(A_ClockInitStruct->ClockPhase << MUSART_CR2_CPHA_BIT)         |
 800189c:	431a      	orrs	r2, r3
					(A_ClockInitStruct->LastBitClockPulse << MUSART_CR2_LBCL_BIT)  ;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	78db      	ldrb	r3, [r3, #3]
 80018a2:	021b      	lsls	r3, r3, #8
					(A_ClockInitStruct->ClockPolarity << MUSART_CR2_CPOL_BIT)      |
 80018a4:	4313      	orrs	r3, r2
 80018a6:	461a      	mov	r2, r3
	USARTx->CR2 =   (A_InitStruct->StopBits << MUSART_CR2_STOP_BIT)				   |
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	611a      	str	r2, [r3, #16]
	/* Clear The Status Register */
	USARTx->SR = 0;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd90      	pop	{r4, r7, pc}
 80018ba:	bf00      	nop
 80018bc:	f3af 8000 	nop.w
 80018c0:	00000000 	.word	0x00000000
 80018c4:	41a7d784 	.word	0x41a7d784
 80018c8:	40100000 	.word	0x40100000
 80018cc:	51eb851f 	.word	0x51eb851f

080018d0 <MUSART_vEnable>:
/* i/p arguemnts: USARTx: USART1, USART2, USART6 */
/* o/p arguments: nothing                        */
/* Desc. : This API Enables USARTx  			 */
/*************************************************/
void MUSART_vEnable(USART_t* USARTx)
{ SET_BIT(USARTx->CR1,MUSART_CR1_UE_BIT); }
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <MUSART_u32EnableRxDMA>:
/* Func. Name: MUSART_u32EnableRxDMA                  */
/* i/p arguemnts: USARTx: USART1, USART2, USART6      */
/* o/p arguments: nothing                             */
/* Desc. : This API Enables USARTx Receiving with DMA */
/******************************************************/
volatile u32* MUSART_u32EnableRxDMA(USART_t* USARTx) {
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR3, MUSART_CR3_DMAR_BIT);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	615a      	str	r2, [r3, #20]
	return &(USARTx->DR);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3304      	adds	r3, #4
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <MUSART_vRxIntStatus>:
/* i/p arguments: USARTx: USART1, USART2, USART6 	 */
/* i/p arguments: Copy_u8Status: ENABLE, DISABLE 	 */
/* o/p arguments: nothing                        	 */
/* Desc. : This API Set the interrupt flag of USARTx */
/*****************************************************/
void MUSART_vRxIntStatus(USART_t* USARTx, u8 Copy_u8Status) {
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	70fb      	strb	r3, [r7, #3]
	switch (Copy_u8Status)
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d008      	beq.n	8001938 <MUSART_vRxIntStatus+0x24>
 8001926:	2b01      	cmp	r3, #1
 8001928:	d10d      	bne.n	8001946 <MUSART_vRxIntStatus+0x32>
	{
		case MUSART_ENABLE:  SET_BIT(USARTx->CR1,MUSART_CR1_RXNEIE_BIT); break;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f043 0220 	orr.w	r2, r3, #32
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	e007      	b.n	8001948 <MUSART_vRxIntStatus+0x34>
		case MUSART_DISABLE: CLR_BIT(USARTx->CR1,MUSART_CR1_RXNEIE_BIT); break;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f023 0220 	bic.w	r2, r3, #32
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	e000      	b.n	8001948 <MUSART_vRxIntStatus+0x34>
		default: break;
 8001946:	bf00      	nop
	}
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <USART1_IRQHandler>:
{ MUSART2_CallBack = ptr; }
void MUSART6_vSetCallBack(void (*ptr)(void))
{ MUSART6_CallBack = ptr; }


void USART1_IRQHandler(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	USART1->SR = 0;
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <USART1_IRQHandler+0x14>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
	MUSART1_CallBack();
 800195e:	4b03      	ldr	r3, [pc, #12]	; (800196c <USART1_IRQHandler+0x18>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4798      	blx	r3
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40011000 	.word	0x40011000
 800196c:	20000034 	.word	0x20000034

08001970 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	USART2->SR = 0;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <USART2_IRQHandler+0x14>)
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
	MUSART2_CallBack();
 800197a:	4b03      	ldr	r3, [pc, #12]	; (8001988 <USART2_IRQHandler+0x18>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4798      	blx	r3
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40004400 	.word	0x40004400
 8001988:	20000038 	.word	0x20000038

0800198c <USART6_IRQHandler>:

void USART6_IRQHandler(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	USART6->SR = 0;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <USART6_IRQHandler+0x14>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
	MUSART6_CallBack();
 8001996:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <USART6_IRQHandler+0x18>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4798      	blx	r3
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40011400 	.word	0x40011400
 80019a4:	2000003c 	.word	0x2000003c

080019a8 <main>:
void APP_vPIDcontrol(void);					/* LINE FOLLOWING FUNCTION USING PID CONCEPT */
/**********************************************************************************************/


/************************************* APPLICATION - MAIN *************************************/
int main(void) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	/* INITIALIZE THE MCU */
	APP_vInit();
 80019ac:	f000 f840 	bl	8001a30 <APP_vInit>
	/* CALIBRATE */
	APP_vCalibrate();
 80019b0:	f000 f98a 	bl	8001cc8 <APP_vCalibrate>
    /* Loop forever */
	while(1) {
		/* CASE WHERE IT IS EXTREME RIGHT TURN */
		if (APP_u16IRData[0] > APP_u16IRThreshold[0] &&
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <main+0x78>)
 80019b6:	881a      	ldrh	r2, [r3, #0]
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <main+0x7c>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d90f      	bls.n	80019e0 <main+0x38>
				APP_u16IRData[APP_IR_ARRAY_COUNT-1] < APP_u16IRThreshold[APP_IR_ARRAY_COUNT-1]) {
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <main+0x78>)
 80019c2:	891a      	ldrh	r2, [r3, #8]
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <main+0x7c>)
 80019c6:	891b      	ldrh	r3, [r3, #8]
		if (APP_u16IRData[0] > APP_u16IRThreshold[0] &&
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d209      	bcs.n	80019e0 <main+0x38>
			APP_s32SpeedLeft = APP_CAR_MOVE_FULL_FORCE;
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <main+0x80>)
 80019ce:	f640 72ff 	movw	r2, #4095	; 0xfff
 80019d2:	601a      	str	r2, [r3, #0]
			APP_s32SpeedRight = APP_CAR_MOVE_ZERO_FORCE;
 80019d4:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <main+0x84>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
			APP_vDriveMotors();
 80019da:	f000 f95b 	bl	8001c94 <APP_vDriveMotors>
			continue;
 80019de:	e01d      	b.n	8001a1c <main+0x74>
		}
		/* CASE WHERE IT IS EXTREME LEFT TURN */
		else if (APP_u16IRData[0] < APP_u16IRThreshold[0] &&
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <main+0x78>)
 80019e2:	881a      	ldrh	r2, [r3, #0]
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <main+0x7c>)
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d20f      	bcs.n	8001a0c <main+0x64>
				APP_u16IRData[APP_IR_ARRAY_COUNT-1] > APP_u16IRThreshold[APP_IR_ARRAY_COUNT-1]) {
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <main+0x78>)
 80019ee:	891a      	ldrh	r2, [r3, #8]
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <main+0x7c>)
 80019f2:	891b      	ldrh	r3, [r3, #8]
		else if (APP_u16IRData[0] < APP_u16IRThreshold[0] &&
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d909      	bls.n	8001a0c <main+0x64>
			APP_s32SpeedLeft = APP_CAR_MOVE_ZERO_FORCE;
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <main+0x80>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
			APP_s32SpeedRight = APP_CAR_MOVE_FULL_FORCE;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <main+0x84>)
 8001a00:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001a04:	601a      	str	r2, [r3, #0]
			APP_vDriveMotors();
 8001a06:	f000 f945 	bl	8001c94 <APP_vDriveMotors>
			continue;
 8001a0a:	e007      	b.n	8001a1c <main+0x74>
		}
		/* NORMAL PID CONTROL */
		else if (APP_u16IRData[2] < APP_u16IRThreshold[2]) {
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <main+0x78>)
 8001a0e:	889a      	ldrh	r2, [r3, #4]
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <main+0x7c>)
 8001a12:	889b      	ldrh	r3, [r3, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d2cd      	bcs.n	80019b4 <main+0xc>
			APP_vPIDcontrol();
 8001a18:	f000 f9f2 	bl	8001e00 <APP_vPIDcontrol>
		if (APP_u16IRData[0] > APP_u16IRThreshold[0] &&
 8001a1c:	e7ca      	b.n	80019b4 <main+0xc>
 8001a1e:	bf00      	nop
 8001a20:	20000040 	.word	0x20000040
 8001a24:	2000004c 	.word	0x2000004c
 8001a28:	20000058 	.word	0x20000058
 8001a2c:	2000005c 	.word	0x2000005c

08001a30 <APP_vInit>:
}
/**********************************************************************************************/



void APP_vInit(void) {
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b08f      	sub	sp, #60	; 0x3c
 8001a34:	af00      	add	r7, sp, #0
	/********************* CLOCK CONFIGURATIONS AND BUSSES/PERIPHERALS ENABLE *********************/
	/* INIT CLOCK AND BUSSES CLOCK */
	MRCC_vInitSysAndBusClock();
 8001a36:	f7ff fd1d 	bl	8001474 <MRCC_vInitSysAndBusClock>
	/* INIT ALL NEEDED PERIPHERALS CLOCK */
	MRCC_vEnablePeriphClock(MRCC_BUS_AHB1, MRCC_AHB1_GPIOAEN);
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff fd53 	bl	80014e8 <MRCC_vEnablePeriphClock>
	MRCC_vEnablePeriphClock(MRCC_BUS_AHB1, MRCC_AHB1_GPIOBEN);
 8001a42:	2101      	movs	r1, #1
 8001a44:	2000      	movs	r0, #0
 8001a46:	f7ff fd4f 	bl	80014e8 <MRCC_vEnablePeriphClock>
	MRCC_vEnablePeriphClock(MRCC_BUS_APB2, MRCC_APB2_ADC1EN);
 8001a4a:	2108      	movs	r1, #8
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f7ff fd4b 	bl	80014e8 <MRCC_vEnablePeriphClock>
	MRCC_vEnablePeriphClock(MRCC_BUS_AHB1, MRCC_AHB1_DMA2EN);
 8001a52:	2116      	movs	r1, #22
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff fd47 	bl	80014e8 <MRCC_vEnablePeriphClock>
	MRCC_vEnablePeriphClock(MRCC_BUS_APB2, MRCC_APB2_USART1EN);
 8001a5a:	2104      	movs	r1, #4
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f7ff fd43 	bl	80014e8 <MRCC_vEnablePeriphClock>
	MRCC_vEnablePeriphClock(MRCC_BUS_APB1, MRCC_APB1_TIM2EN);
 8001a62:	2100      	movs	r1, #0
 8001a64:	2002      	movs	r0, #2
 8001a66:	f7ff fd3f 	bl	80014e8 <MRCC_vEnablePeriphClock>
	MRCC_vEnablePeriphClock(MRCC_BUS_APB1, MRCC_APB1_TIM3EN);
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f7ff fd3b 	bl	80014e8 <MRCC_vEnablePeriphClock>
	MRCC_vEnablePeriphClock(MRCC_BUS_APB1, MRCC_APB1_TIM4EN);
 8001a72:	2102      	movs	r1, #2
 8001a74:	2002      	movs	r0, #2
 8001a76:	f7ff fd37 	bl	80014e8 <MRCC_vEnablePeriphClock>
	/**********************************************************************************************/

	/********************** NESTED VECTOR INTERRUPT CONTROLLER CONFIGURATION **********************/
	MNVIC_vInit();
 8001a7a:	f7ff fced 	bl	8001458 <MNVIC_vInit>
	//MNVIC_vEnablePeripheralInterrupt(APP_TIM_COUNTER_INT_ID);
	/**********************************************************************************************/

	/************************************* PINS CONFIGURATION *************************************/
	/* INIT ANALOG READ PINS */
	MGPIO_vSetPinMode(APP_IR0, MGPIO_MODE_ANALOG);
 8001a7e:	2203      	movs	r2, #3
 8001a80:	2100      	movs	r1, #0
 8001a82:	4879      	ldr	r0, [pc, #484]	; (8001c68 <APP_vInit+0x238>)
 8001a84:	f7ff fafb 	bl	800107e <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(APP_IR1, MGPIO_MODE_ANALOG);
 8001a88:	2203      	movs	r2, #3
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	4876      	ldr	r0, [pc, #472]	; (8001c68 <APP_vInit+0x238>)
 8001a8e:	f7ff faf6 	bl	800107e <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(APP_IR2, MGPIO_MODE_ANALOG);
 8001a92:	2203      	movs	r2, #3
 8001a94:	2102      	movs	r1, #2
 8001a96:	4874      	ldr	r0, [pc, #464]	; (8001c68 <APP_vInit+0x238>)
 8001a98:	f7ff faf1 	bl	800107e <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(APP_IR3, MGPIO_MODE_ANALOG);
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	2103      	movs	r1, #3
 8001aa0:	4871      	ldr	r0, [pc, #452]	; (8001c68 <APP_vInit+0x238>)
 8001aa2:	f7ff faec 	bl	800107e <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(APP_IR4, MGPIO_MODE_ANALOG);
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	2104      	movs	r1, #4
 8001aaa:	486f      	ldr	r0, [pc, #444]	; (8001c68 <APP_vInit+0x238>)
 8001aac:	f7ff fae7 	bl	800107e <MGPIO_vSetPinMode>
	/* INIT USART TRANSMIT RECEIVE PINS */
	MGPIO_vSetPinMode(APP_MOBILE_USART_TX, MGPIO_MODE_ALTERNATE);
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	2109      	movs	r1, #9
 8001ab4:	486c      	ldr	r0, [pc, #432]	; (8001c68 <APP_vInit+0x238>)
 8001ab6:	f7ff fae2 	bl	800107e <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(APP_MOBILE_USART_RX, MGPIO_MODE_ALTERNATE);
 8001aba:	2202      	movs	r2, #2
 8001abc:	210a      	movs	r1, #10
 8001abe:	486a      	ldr	r0, [pc, #424]	; (8001c68 <APP_vInit+0x238>)
 8001ac0:	f7ff fadd 	bl	800107e <MGPIO_vSetPinMode>
	MGPIO_vSetPinAFDirection(APP_MOBILE_USART_TX, APP_MOBILE_USART_AF);
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	2109      	movs	r1, #9
 8001ac8:	4867      	ldr	r0, [pc, #412]	; (8001c68 <APP_vInit+0x238>)
 8001aca:	f7ff fafd 	bl	80010c8 <MGPIO_vSetPinAFDirection>
	MGPIO_vSetPinAFDirection(APP_MOBILE_USART_RX, APP_MOBILE_USART_AF);
 8001ace:	2207      	movs	r2, #7
 8001ad0:	210a      	movs	r1, #10
 8001ad2:	4865      	ldr	r0, [pc, #404]	; (8001c68 <APP_vInit+0x238>)
 8001ad4:	f7ff faf8 	bl	80010c8 <MGPIO_vSetPinAFDirection>
	/* INIT TIMER PWM PIN */
	MGPIO_vSetPinMode(APP_TIM_PWM_R_PIN, MGPIO_MODE_ALTERNATE);
 8001ad8:	2202      	movs	r2, #2
 8001ada:	2104      	movs	r1, #4
 8001adc:	4863      	ldr	r0, [pc, #396]	; (8001c6c <APP_vInit+0x23c>)
 8001ade:	f7ff face 	bl	800107e <MGPIO_vSetPinMode>
	MGPIO_vSetPinAFDirection(APP_TIM_PWM_R_PIN, APP_TIM_PWM_R_AF);
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	4861      	ldr	r0, [pc, #388]	; (8001c6c <APP_vInit+0x23c>)
 8001ae8:	f7ff faee 	bl	80010c8 <MGPIO_vSetPinAFDirection>
	MGPIO_vSetPinMode(APP_TIM_PWM_L_PIN, MGPIO_MODE_ALTERNATE);
 8001aec:	2202      	movs	r2, #2
 8001aee:	2106      	movs	r1, #6
 8001af0:	485e      	ldr	r0, [pc, #376]	; (8001c6c <APP_vInit+0x23c>)
 8001af2:	f7ff fac4 	bl	800107e <MGPIO_vSetPinMode>
	MGPIO_vSetPinAFDirection(APP_TIM_PWM_L_PIN, APP_TIM_PWM_L_AF);
 8001af6:	2202      	movs	r2, #2
 8001af8:	2106      	movs	r1, #6
 8001afa:	485c      	ldr	r0, [pc, #368]	; (8001c6c <APP_vInit+0x23c>)
 8001afc:	f7ff fae4 	bl	80010c8 <MGPIO_vSetPinAFDirection>
	/**********************************************************************************************/

	/************************************* ADC CONFIGURATIONS *************************************/
	/* INITIALIZE ADC */
	MADC_vInit();
 8001b00:	f7fe ffa8 	bl	8000a54 <MADC_vInit>
	/* SET THE NUMBER OF CONVERSIONS TO THE NUMBER OF IRS IN THE ARRAY */
	MADC_vSetNumberOfConversions(MADC_REGULAR_GROUP, MADC_FIVE_CONVERSIONS);
 8001b04:	2104      	movs	r1, #4
 8001b06:	2000      	movs	r0, #0
 8001b08:	f7ff f8b0 	bl	8000c6c <MADC_vSetNumberOfConversions>
	/* SET ALL OF THEIR SAMPLE TIMES */
	MADC_vSetSamplingTime(APP_IR0_CHANNEL, MADC_SAMPLING_CYCLES_3);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f7ff f84e 	bl	8000bb0 <MADC_vSetSamplingTime>
	MADC_vSetSamplingTime(APP_IR1_CHANNEL, MADC_SAMPLING_CYCLES_3);
 8001b14:	2100      	movs	r1, #0
 8001b16:	2001      	movs	r0, #1
 8001b18:	f7ff f84a 	bl	8000bb0 <MADC_vSetSamplingTime>
	MADC_vSetSamplingTime(APP_IR2_CHANNEL, MADC_SAMPLING_CYCLES_3);
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2002      	movs	r0, #2
 8001b20:	f7ff f846 	bl	8000bb0 <MADC_vSetSamplingTime>
	MADC_vSetSamplingTime(APP_IR3_CHANNEL, MADC_SAMPLING_CYCLES_3);
 8001b24:	2100      	movs	r1, #0
 8001b26:	2003      	movs	r0, #3
 8001b28:	f7ff f842 	bl	8000bb0 <MADC_vSetSamplingTime>
	MADC_vSetSamplingTime(APP_IR4_CHANNEL, MADC_SAMPLING_CYCLES_3);
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	2004      	movs	r0, #4
 8001b30:	f7ff f83e 	bl	8000bb0 <MADC_vSetSamplingTime>
	/* SET THEIR SEQUENCE */
	MADC_vSetSequence(MADC_REGULAR_GROUP, APP_IR0_CHANNEL, MADC_SEQUENCE_1);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff f8bf 	bl	8000cbc <MADC_vSetSequence>
	MADC_vSetSequence(MADC_REGULAR_GROUP, APP_IR1_CHANNEL, MADC_SEQUENCE_2);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	2101      	movs	r1, #1
 8001b42:	2000      	movs	r0, #0
 8001b44:	f7ff f8ba 	bl	8000cbc <MADC_vSetSequence>
	MADC_vSetSequence(MADC_REGULAR_GROUP, APP_IR2_CHANNEL, MADC_SEQUENCE_3);
 8001b48:	2202      	movs	r2, #2
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff f8b5 	bl	8000cbc <MADC_vSetSequence>
	MADC_vSetSequence(MADC_REGULAR_GROUP, APP_IR3_CHANNEL, MADC_SEQUENCE_4);
 8001b52:	2203      	movs	r2, #3
 8001b54:	2103      	movs	r1, #3
 8001b56:	2000      	movs	r0, #0
 8001b58:	f7ff f8b0 	bl	8000cbc <MADC_vSetSequence>
	MADC_vSetSequence(MADC_REGULAR_GROUP, APP_IR4_CHANNEL, MADC_SEQUENCE_5);
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	2104      	movs	r1, #4
 8001b60:	2000      	movs	r0, #0
 8001b62:	f7ff f8ab 	bl	8000cbc <MADC_vSetSequence>
	/**********************************************************************************************/

	/********************************* DMA CONFIGURATIONS FOR ADC *********************************/
	volatile u32* DMAsrcAddr = MADC_u32SetRegularDMA(MADC_ENABLE);
 8001b66:	2001      	movs	r0, #1
 8001b68:	f7fe fff8 	bl	8000b5c <MADC_u32SetRegularDMA>
 8001b6c:	6378      	str	r0, [r7, #52]	; 0x34
	/* Enable DMA */
	MDMA_DirectInitType dma = {MDMA_DISABLE, MDMA_DIRECTION_PER_MEM, MDMA_ENABLE,
 8001b6e:	4a40      	ldr	r2, [pc, #256]	; (8001c70 <APP_vInit+0x240>)
 8001b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b78:	6018      	str	r0, [r3, #0]
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	8019      	strh	r1, [r3, #0]
 8001b7e:	3302      	adds	r3, #2
 8001b80:	0c0a      	lsrs	r2, r1, #16
 8001b82:	701a      	strb	r2, [r3, #0]
								MDMA_DISABLE, MDMA_ENABLE, MDMA_PRIORITY_VHIGH, MDMA_CHANNEL_0};
	MDMA_TransferStruct dmat = {(u32*)DMAsrcAddr, (u32*)APP_u16IRData, 5, MDMA_SIZE_HWORD};
 8001b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b86:	623b      	str	r3, [r7, #32]
 8001b88:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <APP_vInit+0x244>)
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8c:	2305      	movs	r3, #5
 8001b8e:	853b      	strh	r3, [r7, #40]	; 0x28
 8001b90:	2301      	movs	r3, #1
 8001b92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	MDMA_vDirectInit(DMA2, MDMA_STREAM_0, &dma);
 8001b96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4836      	ldr	r0, [pc, #216]	; (8001c78 <APP_vInit+0x248>)
 8001ba0:	f7ff f908 	bl	8000db4 <MDMA_vDirectInit>
	MDMA_vStart(DMA2, MDMA_STREAM_0, &dmat);
 8001ba4:	f107 0320 	add.w	r3, r7, #32
 8001ba8:	461a      	mov	r2, r3
 8001baa:	2100      	movs	r1, #0
 8001bac:	4832      	ldr	r0, [pc, #200]	; (8001c78 <APP_vInit+0x248>)
 8001bae:	f7ff f9ec 	bl	8000f8a <MDMA_vStart>
	MADC_vEnable(MADC_ENABLE, MADC_DISABLE);
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f7fe ffa9 	bl	8000b0c <MADC_vEnable>
	/**********************************************************************************************/

	/************************************ USART CONFIGURATIONS ************************************/
	/* Initialize USART */
	MUSART_InitTypeDef uart = {9600, MUSART_DATAWIDTH_8BIT,
 8001bba:	4a30      	ldr	r2, [pc, #192]	; (8001c7c <APP_vInit+0x24c>)
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
							MUSART_STOP_ONE_BIT, MUSART_DISABLE,
							MUSART_PARITY_EVEN, MUSART_DIRECTION_TX_RX,
							MUSART_DISABLE, MUSART_OVER_SAMPLING_16};
	MUSART_ClockInitTypeDef uart_clock = {MUSART_DISABLE,0,0,0};		/* Disable USART's Clock */
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
	MUSART_vInit(APP_MOBILE_USART, &uart, &uart_clock);
 8001bca:	f107 0210 	add.w	r2, r7, #16
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	482a      	ldr	r0, [pc, #168]	; (8001c80 <APP_vInit+0x250>)
 8001bd6:	f7ff fd43 	bl	8001660 <MUSART_vInit>
	MUSART_vEnable(APP_MOBILE_USART);
 8001bda:	4829      	ldr	r0, [pc, #164]	; (8001c80 <APP_vInit+0x250>)
 8001bdc:	f7ff fe78 	bl	80018d0 <MUSART_vEnable>
	MUSART_vRxIntStatus(APP_MOBILE_USART, MUSART_DISABLE);
 8001be0:	2100      	movs	r1, #0
 8001be2:	4827      	ldr	r0, [pc, #156]	; (8001c80 <APP_vInit+0x250>)
 8001be4:	f7ff fe96 	bl	8001914 <MUSART_vRxIntStatus>
	/**********************************************************************************************/

	/******************************** DMA CONFIGURATIONS FOR USART ********************************/
	dmat.SrcAddr = (u32*)MUSART_u32EnableRxDMA(APP_MOBILE_USART);
 8001be8:	4825      	ldr	r0, [pc, #148]	; (8001c80 <APP_vInit+0x250>)
 8001bea:	f7ff fe81 	bl	80018f0 <MUSART_u32EnableRxDMA>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	623b      	str	r3, [r7, #32]
	dmat.DstAddr = (u32*)APP_u8String;
 8001bf2:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <APP_vInit+0x254>)
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
	dmat.Length = APP_MOBILE_MESSAGE_LENGTH;
 8001bf6:	2306      	movs	r3, #6
 8001bf8:	853b      	strh	r3, [r7, #40]	; 0x28
	dmat.Size = MDMA_SIZE_BYTE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	dma.Channel = MDMA_CHANNEL_4;
 8001c00:	2304      	movs	r3, #4
 8001c02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	dma.PriorityLevel = MDMA_PRIORITY_HIGH;
 8001c06:	2302      	movs	r3, #2
 8001c08:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	MDMA_vDirectInit(DMA2, MDMA_STREAM_5, &dma);
 8001c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c10:	461a      	mov	r2, r3
 8001c12:	2105      	movs	r1, #5
 8001c14:	4818      	ldr	r0, [pc, #96]	; (8001c78 <APP_vInit+0x248>)
 8001c16:	f7ff f8cd 	bl	8000db4 <MDMA_vDirectInit>
	MDMA_vStart(DMA2, MDMA_STREAM_5, &dmat);
 8001c1a:	f107 0320 	add.w	r3, r7, #32
 8001c1e:	461a      	mov	r2, r3
 8001c20:	2105      	movs	r1, #5
 8001c22:	4815      	ldr	r0, [pc, #84]	; (8001c78 <APP_vInit+0x248>)
 8001c24:	f7ff f9b1 	bl	8000f8a <MDMA_vStart>
	/**********************************************************************************************/

	/*********************************** GPT PWM CONFIGURATIONS ***********************************/
	MGPT_PWMInitTypeDef gpt = {APP_CHANNEL_PWM_R, MGPT_PWM_MODE_1, APP_PWM_PERIOD,
 8001c28:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <APP_vInit+0x258>)
 8001c2a:	463c      	mov	r4, r7
 8001c2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						APP_PWM_PRESCALER, MGPT_ALLIGNMENT_EDGE_MODE, MGPT_DIRECTION_UP_COUNTER,
						MGPT_CHANNEL_OUTPUT_ACTIVE_HIGH};
	MGPT_vPWMInit(APP_TIM_PWM_R, &gpt);
 8001c32:	463b      	mov	r3, r7
 8001c34:	4619      	mov	r1, r3
 8001c36:	4815      	ldr	r0, [pc, #84]	; (8001c8c <APP_vInit+0x25c>)
 8001c38:	f7ff fa80 	bl	800113c <MGPT_vPWMInit>
	gpt.Channel = APP_CHANNEL_PWM_L;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	703b      	strb	r3, [r7, #0]
	MGPT_vPWMInit(APP_TIM_PWM_L, &gpt);
 8001c40:	463b      	mov	r3, r7
 8001c42:	4619      	mov	r1, r3
 8001c44:	4812      	ldr	r0, [pc, #72]	; (8001c90 <APP_vInit+0x260>)
 8001c46:	f7ff fa79 	bl	800113c <MGPT_vPWMInit>
	/* SET THE SPEED TO 0 */
	MGPT_vSetPWMDutyCycle(APP_TIM_PWM_R, APP_CHANNEL_PWM_R, APP_CAR_MOVE_ZERO_FORCE);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	480f      	ldr	r0, [pc, #60]	; (8001c8c <APP_vInit+0x25c>)
 8001c50:	f7ff fbb2 	bl	80013b8 <MGPT_vSetPWMDutyCycle>
	MGPT_vSetPWMDutyCycle(APP_TIM_PWM_L, APP_CHANNEL_PWM_L, APP_CAR_MOVE_ZERO_FORCE);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2100      	movs	r1, #0
 8001c58:	480d      	ldr	r0, [pc, #52]	; (8001c90 <APP_vInit+0x260>)
 8001c5a:	f7ff fbad 	bl	80013b8 <MGPT_vSetPWMDutyCycle>
	/**********************************************************************************************/

	/******************************* GPT TIME COUNTER CONFIGURATIONS ******************************/
	//MGPT_vTimeCounterInit(GPT2, APP_TIM_COUNTER_TICK_TIME, test);
	/**********************************************************************************************/
}
 8001c5e:	bf00      	nop
 8001c60:	373c      	adds	r7, #60	; 0x3c
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd90      	pop	{r4, r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	40020400 	.word	0x40020400
 8001c70:	08002028 	.word	0x08002028
 8001c74:	20000040 	.word	0x20000040
 8001c78:	40026400 	.word	0x40026400
 8001c7c:	08002030 	.word	0x08002030
 8001c80:	40011000 	.word	0x40011000
 8001c84:	20000060 	.word	0x20000060
 8001c88:	0800203c 	.word	0x0800203c
 8001c8c:	40000400 	.word	0x40000400
 8001c90:	40000800 	.word	0x40000800

08001c94 <APP_vDriveMotors>:

void APP_vDriveMotors(void) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	MGPT_vSetPWMDutyCycle(APP_TIM_PWM_R, APP_CHANNEL_PWM_R, (u32)APP_s32SpeedRight);
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <APP_vDriveMotors+0x24>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4806      	ldr	r0, [pc, #24]	; (8001cbc <APP_vDriveMotors+0x28>)
 8001ca2:	f7ff fb89 	bl	80013b8 <MGPT_vSetPWMDutyCycle>
	MGPT_vSetPWMDutyCycle(APP_TIM_PWM_L, APP_CHANNEL_PWM_L, (u32)APP_s32SpeedLeft);
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <APP_vDriveMotors+0x2c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	2100      	movs	r1, #0
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <APP_vDriveMotors+0x30>)
 8001cb0:	f7ff fb82 	bl	80013b8 <MGPT_vSetPWMDutyCycle>
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	2000005c 	.word	0x2000005c
 8001cbc:	40000400 	.word	0x40000400
 8001cc0:	20000058 	.word	0x20000058
 8001cc4:	40000800 	.word	0x40000800

08001cc8 <APP_vCalibrate>:

void APP_vCalibrate(void) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
	u16 minVal[APP_IR_ARRAY_COUNT];
	u16 maxVal[APP_IR_ARRAY_COUNT];
	/* INITIALIZE THE MINIMUM AND MAXIMUM */
	u8 i = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	77fb      	strb	r3, [r7, #31]
	u16 greatcounter = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	83bb      	strh	r3, [r7, #28]
	for (i = 0; i < APP_IR_ARRAY_COUNT; i++) {
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	77fb      	strb	r3, [r7, #31]
 8001cda:	e016      	b.n	8001d0a <APP_vCalibrate+0x42>
		minVal[i] = APP_u16IRData[i];
 8001cdc:	7ffa      	ldrb	r2, [r7, #31]
 8001cde:	7ffb      	ldrb	r3, [r7, #31]
 8001ce0:	4943      	ldr	r1, [pc, #268]	; (8001df0 <APP_vCalibrate+0x128>)
 8001ce2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	3320      	adds	r3, #32
 8001cea:	443b      	add	r3, r7
 8001cec:	f823 2c10 	strh.w	r2, [r3, #-16]
		maxVal[i] = APP_u16IRData[i];
 8001cf0:	7ffa      	ldrb	r2, [r7, #31]
 8001cf2:	7ffb      	ldrb	r3, [r7, #31]
 8001cf4:	493e      	ldr	r1, [pc, #248]	; (8001df0 <APP_vCalibrate+0x128>)
 8001cf6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	3320      	adds	r3, #32
 8001cfe:	443b      	add	r3, r7
 8001d00:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for (i = 0; i < APP_IR_ARRAY_COUNT; i++) {
 8001d04:	7ffb      	ldrb	r3, [r7, #31]
 8001d06:	3301      	adds	r3, #1
 8001d08:	77fb      	strb	r3, [r7, #31]
 8001d0a:	7ffb      	ldrb	r3, [r7, #31]
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d9e5      	bls.n	8001cdc <APP_vCalibrate+0x14>
	}
	/* SET THE MOTOR TO MAX SPEED TO ROTATE THE ROBOT  TO GET MULTIPLE VALUES */
	MGPT_vSetPWMDutyCycle(APP_TIM_PWM_R, APP_CHANNEL_PWM_R, APP_PWM_PERIOD);
 8001d10:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001d14:	2100      	movs	r1, #0
 8001d16:	4837      	ldr	r0, [pc, #220]	; (8001df4 <APP_vCalibrate+0x12c>)
 8001d18:	f7ff fb4e 	bl	80013b8 <MGPT_vSetPWMDutyCycle>
	/* START CALIBRATION PROCESS */
	for (greatcounter = 0; greatcounter < 3000; greatcounter++) {
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	83bb      	strh	r3, [r7, #28]
 8001d20:	e037      	b.n	8001d92 <APP_vCalibrate+0xca>
		for (i = 0; i < APP_IR_ARRAY_COUNT; i++) {
 8001d22:	2300      	movs	r3, #0
 8001d24:	77fb      	strb	r3, [r7, #31]
 8001d26:	e02e      	b.n	8001d86 <APP_vCalibrate+0xbe>
			if (APP_u16IRData[i] > maxVal[i]) { maxVal[i] = APP_u16IRData[i]; }
 8001d28:	7ffb      	ldrb	r3, [r7, #31]
 8001d2a:	4a31      	ldr	r2, [pc, #196]	; (8001df0 <APP_vCalibrate+0x128>)
 8001d2c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d30:	7ffb      	ldrb	r3, [r7, #31]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	3320      	adds	r3, #32
 8001d36:	443b      	add	r3, r7
 8001d38:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d909      	bls.n	8001d54 <APP_vCalibrate+0x8c>
 8001d40:	7ffa      	ldrb	r2, [r7, #31]
 8001d42:	7ffb      	ldrb	r3, [r7, #31]
 8001d44:	492a      	ldr	r1, [pc, #168]	; (8001df0 <APP_vCalibrate+0x128>)
 8001d46:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	3320      	adds	r3, #32
 8001d4e:	443b      	add	r3, r7
 8001d50:	f823 2c1c 	strh.w	r2, [r3, #-28]
			if (APP_u16IRData[i] < minVal[i]) { minVal[i] = APP_u16IRData[i]; }
 8001d54:	7ffb      	ldrb	r3, [r7, #31]
 8001d56:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <APP_vCalibrate+0x128>)
 8001d58:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d5c:	7ffb      	ldrb	r3, [r7, #31]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	3320      	adds	r3, #32
 8001d62:	443b      	add	r3, r7
 8001d64:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d209      	bcs.n	8001d80 <APP_vCalibrate+0xb8>
 8001d6c:	7ffa      	ldrb	r2, [r7, #31]
 8001d6e:	7ffb      	ldrb	r3, [r7, #31]
 8001d70:	491f      	ldr	r1, [pc, #124]	; (8001df0 <APP_vCalibrate+0x128>)
 8001d72:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	3320      	adds	r3, #32
 8001d7a:	443b      	add	r3, r7
 8001d7c:	f823 2c10 	strh.w	r2, [r3, #-16]
		for (i = 0; i < APP_IR_ARRAY_COUNT; i++) {
 8001d80:	7ffb      	ldrb	r3, [r7, #31]
 8001d82:	3301      	adds	r3, #1
 8001d84:	77fb      	strb	r3, [r7, #31]
 8001d86:	7ffb      	ldrb	r3, [r7, #31]
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d9cd      	bls.n	8001d28 <APP_vCalibrate+0x60>
	for (greatcounter = 0; greatcounter < 3000; greatcounter++) {
 8001d8c:	8bbb      	ldrh	r3, [r7, #28]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	83bb      	strh	r3, [r7, #28]
 8001d92:	8bbb      	ldrh	r3, [r7, #28]
 8001d94:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d9c2      	bls.n	8001d22 <APP_vCalibrate+0x5a>
		}
	}
	/* SET THE THRESHOLD */
	for (i = 0; i < APP_IR_ARRAY_COUNT; i++) { APP_u16IRThreshold[i] = (minVal[i] + maxVal[i]) / 2; }
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	77fb      	strb	r3, [r7, #31]
 8001da0:	e019      	b.n	8001dd6 <APP_vCalibrate+0x10e>
 8001da2:	7ffb      	ldrb	r3, [r7, #31]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	3320      	adds	r3, #32
 8001da8:	443b      	add	r3, r7
 8001daa:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001dae:	461a      	mov	r2, r3
 8001db0:	7ffb      	ldrb	r3, [r7, #31]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	3320      	adds	r3, #32
 8001db6:	443b      	add	r3, r7
 8001db8:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	0fda      	lsrs	r2, r3, #31
 8001dc0:	4413      	add	r3, r2
 8001dc2:	105b      	asrs	r3, r3, #1
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	7ffb      	ldrb	r3, [r7, #31]
 8001dc8:	b291      	uxth	r1, r2
 8001dca:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <APP_vCalibrate+0x130>)
 8001dcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001dd0:	7ffb      	ldrb	r3, [r7, #31]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	77fb      	strb	r3, [r7, #31]
 8001dd6:	7ffb      	ldrb	r3, [r7, #31]
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d9e2      	bls.n	8001da2 <APP_vCalibrate+0xda>
	/* SET THE SPEED BACK TO ZERO */
	MGPT_vSetPWMDutyCycle(APP_TIM_PWM_R, APP_CHANNEL_PWM_R, APP_CAR_MOVE_ZERO_FORCE);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <APP_vCalibrate+0x12c>)
 8001de2:	f7ff fae9 	bl	80013b8 <MGPT_vSetPWMDutyCycle>
}
 8001de6:	bf00      	nop
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000040 	.word	0x20000040
 8001df4:	40000400 	.word	0x40000400
 8001df8:	2000004c 	.word	0x2000004c
 8001dfc:	00000000 	.word	0x00000000

08001e00 <APP_vPIDcontrol>:

void APP_vPIDcontrol(void) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
	/* GET PID CONSTANTS */
	APP_f32Kp = 0.0006 * (1000.0 - APP_u16IRData[2]);
 8001e06:	4b4e      	ldr	r3, [pc, #312]	; (8001f40 <APP_vPIDcontrol+0x140>)
 8001e08:	889b      	ldrh	r3, [r3, #4]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fb36 	bl	800047c <__aeabi_i2d>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	f04f 0000 	mov.w	r0, #0
 8001e18:	494a      	ldr	r1, [pc, #296]	; (8001f44 <APP_vPIDcontrol+0x144>)
 8001e1a:	f7fe f9e1 	bl	80001e0 <__aeabi_dsub>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	a344      	add	r3, pc, #272	; (adr r3, 8001f38 <APP_vPIDcontrol+0x138>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	f7fe fb90 	bl	8000550 <__aeabi_dmul>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	f7fe fdbc 	bl	80009b4 <__aeabi_d2f>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	4a42      	ldr	r2, [pc, #264]	; (8001f48 <APP_vPIDcontrol+0x148>)
 8001e40:	6013      	str	r3, [r2, #0]
	APP_f32Kd = 10.0 * APP_f32Kp;
 8001e42:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <APP_vPIDcontrol+0x148>)
 8001e44:	edd3 7a00 	vldr	s15, [r3]
 8001e48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e50:	4b3e      	ldr	r3, [pc, #248]	; (8001f4c <APP_vPIDcontrol+0x14c>)
 8001e52:	edc3 7a00 	vstr	s15, [r3]
	APP_f32Ki = 0.0001;
 8001e56:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <APP_vPIDcontrol+0x150>)
 8001e58:	4a3e      	ldr	r2, [pc, #248]	; (8001f54 <APP_vPIDcontrol+0x154>)
 8001e5a:	601a      	str	r2, [r3, #0]
	/* GET CURRENT ERROR */
	APP_s32Error = APP_u16IRData[1] - APP_u16IRData[3];
 8001e5c:	4b38      	ldr	r3, [pc, #224]	; (8001f40 <APP_vPIDcontrol+0x140>)
 8001e5e:	885b      	ldrh	r3, [r3, #2]
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b37      	ldr	r3, [pc, #220]	; (8001f40 <APP_vPIDcontrol+0x140>)
 8001e64:	88db      	ldrh	r3, [r3, #6]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	4a3b      	ldr	r2, [pc, #236]	; (8001f58 <APP_vPIDcontrol+0x158>)
 8001e6a:	6013      	str	r3, [r2, #0]
	/* GET PID VARIABLES */
	APP_s32P = APP_s32Error;
 8001e6c:	4b3a      	ldr	r3, [pc, #232]	; (8001f58 <APP_vPIDcontrol+0x158>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a3a      	ldr	r2, [pc, #232]	; (8001f5c <APP_vPIDcontrol+0x15c>)
 8001e72:	6013      	str	r3, [r2, #0]
	APP_s32I += APP_s32Error;
 8001e74:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <APP_vPIDcontrol+0x160>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b37      	ldr	r3, [pc, #220]	; (8001f58 <APP_vPIDcontrol+0x158>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a38      	ldr	r2, [pc, #224]	; (8001f60 <APP_vPIDcontrol+0x160>)
 8001e80:	6013      	str	r3, [r2, #0]
	APP_s32D = APP_s32Error - APP_s32PrevError;
 8001e82:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <APP_vPIDcontrol+0x158>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <APP_vPIDcontrol+0x164>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	4a36      	ldr	r2, [pc, #216]	; (8001f68 <APP_vPIDcontrol+0x168>)
 8001e8e:	6013      	str	r3, [r2, #0]
	/* SET THE PREVIOUS ERROR */
	APP_s32PrevError = APP_s32Error;
 8001e90:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <APP_vPIDcontrol+0x158>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a33      	ldr	r2, [pc, #204]	; (8001f64 <APP_vPIDcontrol+0x164>)
 8001e96:	6013      	str	r3, [r2, #0]
	/* CALCULATE PID VALUE */
	s32 APP_s32PID = (APP_f32Kp * APP_s32P) + (APP_f32Kd * APP_s32D) + (APP_f32Ki * APP_s32I);
 8001e98:	4b30      	ldr	r3, [pc, #192]	; (8001f5c <APP_vPIDcontrol+0x15c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	ee07 3a90 	vmov	s15, r3
 8001ea0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea4:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <APP_vPIDcontrol+0x148>)
 8001ea6:	edd3 7a00 	vldr	s15, [r3]
 8001eaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <APP_vPIDcontrol+0x168>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <APP_vPIDcontrol+0x14c>)
 8001ebc:	edd3 7a00 	vldr	s15, [r3]
 8001ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <APP_vPIDcontrol+0x160>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	ee07 3a90 	vmov	s15, r3
 8001ed0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <APP_vPIDcontrol+0x150>)
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee6:	ee17 3a90 	vmov	r3, s15
 8001eea:	607b      	str	r3, [r7, #4]
	APP_s32SpeedLeft = APP_AVERAGE_SPEED - APP_s32PID;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8001ef2:	3307      	adds	r3, #7
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <APP_vPIDcontrol+0x16c>)
 8001ef8:	601a      	str	r2, [r3, #0]
	APP_s32SpeedRight = APP_AVERAGE_SPEED + APP_s32PID;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <APP_vPIDcontrol+0x170>)
 8001f04:	601a      	str	r2, [r3, #0]
	if (APP_s32SpeedLeft > APP_CAR_MOVE_FULL_FORCE) 		{ APP_s32SpeedLeft = APP_CAR_MOVE_FULL_FORCE; }
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <APP_vPIDcontrol+0x16c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0e:	d303      	bcc.n	8001f18 <APP_vPIDcontrol+0x118>
 8001f10:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <APP_vPIDcontrol+0x16c>)
 8001f12:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001f16:	601a      	str	r2, [r3, #0]
	else if (APP_s32SpeedLeft < APP_CAR_MOVE_ZERO_FORCE) 	{ APP_s32SpeedLeft = APP_CAR_MOVE_ZERO_FORCE; }
	if (APP_s32SpeedRight > APP_CAR_MOVE_FULL_FORCE) 		{ APP_s32SpeedRight = APP_CAR_MOVE_FULL_FORCE; }
 8001f18:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <APP_vPIDcontrol+0x170>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f20:	d303      	bcc.n	8001f2a <APP_vPIDcontrol+0x12a>
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <APP_vPIDcontrol+0x170>)
 8001f24:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001f28:	601a      	str	r2, [r3, #0]
	else if (APP_s32SpeedRight < APP_CAR_MOVE_ZERO_FORCE) 	{ APP_s32SpeedRight = APP_CAR_MOVE_ZERO_FORCE; }
	APP_vDriveMotors();
 8001f2a:	f7ff feb3 	bl	8001c94 <APP_vDriveMotors>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	30553261 	.word	0x30553261
 8001f3c:	3f43a92a 	.word	0x3f43a92a
 8001f40:	20000040 	.word	0x20000040
 8001f44:	408f4000 	.word	0x408f4000
 8001f48:	20000068 	.word	0x20000068
 8001f4c:	2000006c 	.word	0x2000006c
 8001f50:	20000070 	.word	0x20000070
 8001f54:	38d1b717 	.word	0x38d1b717
 8001f58:	20000074 	.word	0x20000074
 8001f5c:	2000007c 	.word	0x2000007c
 8001f60:	20000080 	.word	0x20000080
 8001f64:	20000078 	.word	0x20000078
 8001f68:	20000084 	.word	0x20000084
 8001f6c:	20000058 	.word	0x20000058
 8001f70:	2000005c 	.word	0x2000005c

08001f74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f74:	480d      	ldr	r0, [pc, #52]	; (8001fac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f78:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f7c:	480c      	ldr	r0, [pc, #48]	; (8001fb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f7e:	490d      	ldr	r1, [pc, #52]	; (8001fb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f80:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <LoopForever+0xe>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f84:	e002      	b.n	8001f8c <LoopCopyDataInit>

08001f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8a:	3304      	adds	r3, #4

08001f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f90:	d3f9      	bcc.n	8001f86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f94:	4c0a      	ldr	r4, [pc, #40]	; (8001fc0 <LoopForever+0x16>)
  movs r3, #0
 8001f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f98:	e001      	b.n	8001f9e <LoopFillZerobss>

08001f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f9c:	3204      	adds	r2, #4

08001f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa0:	d3fb      	bcc.n	8001f9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fa2:	f000 f811 	bl	8001fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fa6:	f7ff fcff 	bl	80019a8 <main>

08001faa <LoopForever>:

LoopForever:
  b LoopForever
 8001faa:	e7fe      	b.n	8001faa <LoopForever>
  ldr   r0, =_estack
 8001fac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001fb8:	08002054 	.word	0x08002054
  ldr r2, =_sbss
 8001fbc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001fc0:	20000088 	.word	0x20000088

08001fc4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <ADC_IRQHandler>
	...

08001fc8 <__libc_init_array>:
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	4d0d      	ldr	r5, [pc, #52]	; (8002000 <__libc_init_array+0x38>)
 8001fcc:	4c0d      	ldr	r4, [pc, #52]	; (8002004 <__libc_init_array+0x3c>)
 8001fce:	1b64      	subs	r4, r4, r5
 8001fd0:	10a4      	asrs	r4, r4, #2
 8001fd2:	2600      	movs	r6, #0
 8001fd4:	42a6      	cmp	r6, r4
 8001fd6:	d109      	bne.n	8001fec <__libc_init_array+0x24>
 8001fd8:	4d0b      	ldr	r5, [pc, #44]	; (8002008 <__libc_init_array+0x40>)
 8001fda:	4c0c      	ldr	r4, [pc, #48]	; (800200c <__libc_init_array+0x44>)
 8001fdc:	f000 f818 	bl	8002010 <_init>
 8001fe0:	1b64      	subs	r4, r4, r5
 8001fe2:	10a4      	asrs	r4, r4, #2
 8001fe4:	2600      	movs	r6, #0
 8001fe6:	42a6      	cmp	r6, r4
 8001fe8:	d105      	bne.n	8001ff6 <__libc_init_array+0x2e>
 8001fea:	bd70      	pop	{r4, r5, r6, pc}
 8001fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ff0:	4798      	blx	r3
 8001ff2:	3601      	adds	r6, #1
 8001ff4:	e7ee      	b.n	8001fd4 <__libc_init_array+0xc>
 8001ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ffa:	4798      	blx	r3
 8001ffc:	3601      	adds	r6, #1
 8001ffe:	e7f2      	b.n	8001fe6 <__libc_init_array+0x1e>
 8002000:	0800204c 	.word	0x0800204c
 8002004:	0800204c 	.word	0x0800204c
 8002008:	0800204c 	.word	0x0800204c
 800200c:	08002050 	.word	0x08002050

08002010 <_init>:
 8002010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002012:	bf00      	nop
 8002014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002016:	bc08      	pop	{r3}
 8002018:	469e      	mov	lr, r3
 800201a:	4770      	bx	lr

0800201c <_fini>:
 800201c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201e:	bf00      	nop
 8002020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002022:	bc08      	pop	{r3}
 8002024:	469e      	mov	lr, r3
 8002026:	4770      	bx	lr
