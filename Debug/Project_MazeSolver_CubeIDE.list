
Project_MazeSolver_CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000060c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007a0  080007a8  000107a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007a0  080007a0  000107a8  2**0
                  CONTENTS
  4 .ARM          00000000  080007a0  080007a0  000107a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007a0  080007a8  000107a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007a0  080007a0  000107a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007a4  080007a4  000107a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000000  080007a8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080007a8  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000107a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000107d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001823  00000000  00000000  0001081b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006fa  00000000  00000000  0001203e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000248  00000000  00000000  00012738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000019a  00000000  00000000  00012980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001523  00000000  00000000  00012b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c6c  00000000  00000000  0001403d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006a00  00000000  00000000  00014ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000007d8  00000000  00000000  0001b6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0001be84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000788 	.word	0x08000788

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000788 	.word	0x08000788

080001d4 <MADC_vGeneralInit>:
/* Func. Name: MADC_vGeneralInit                     */
/* i/p arguments: nothing                            */
/* o/p arguments: nothing                            */
/* Desc. : This API Initializes General ADC Settings */
/*****************************************************/
void MADC_vGeneralInit(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	/* Set the Prescaler of the ADC CLK */
	WRITE_BITS(ADC_CCR, MADC_CLOCK_PRESCALER, TWO_BITS, MADC_CCR_ADCPRE0_BIT);
 80001d8:	4b2b      	ldr	r3, [pc, #172]	; (8000288 <MADC_vGeneralInit+0xb4>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80001e0:	4a29      	ldr	r2, [pc, #164]	; (8000288 <MADC_vGeneralInit+0xb4>)
 80001e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001e6:	6013      	str	r3, [r2, #0]
	/* Set the Data Allignment */
	if (MADC_DATA_ALLIGNMENT == MADC_ALLIGN_RIGHT) { CLR_BIT(ADC1->CR2, MADC_CR2_ALLIGN_BIT); }
 80001e8:	4b28      	ldr	r3, [pc, #160]	; (800028c <MADC_vGeneralInit+0xb8>)
 80001ea:	689b      	ldr	r3, [r3, #8]
 80001ec:	4a27      	ldr	r2, [pc, #156]	; (800028c <MADC_vGeneralInit+0xb8>)
 80001ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001f2:	6093      	str	r3, [r2, #8]
	else 										   { SET_BIT(ADC1->CR2, MADC_CR2_ALLIGN_BIT); }
	/* Set the Resolution of the ADC */
	WRITE_BITS(ADC1->CR1, MADC_RESOLUTION, TWO_BITS, MADC_CR1_RES0_BIT);
 80001f4:	4b25      	ldr	r3, [pc, #148]	; (800028c <MADC_vGeneralInit+0xb8>)
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	4a24      	ldr	r2, [pc, #144]	; (800028c <MADC_vGeneralInit+0xb8>)
 80001fa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80001fe:	6053      	str	r3, [r2, #4]
	/* Clear Status Register */
	ADC1->SR = 0;
 8000200:	4b22      	ldr	r3, [pc, #136]	; (800028c <MADC_vGeneralInit+0xb8>)
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
	/* Set the Conversion Mode of Regular Group */
	#if MADC_REGULAR_CONVERSION_MODE == MADC_NORMAL_CONVERSION
		CLR_BIT(ADC1->CR1, MADC_CR1_DISCEN_BIT);
		CLR_BIT(ADC1->CR2, MADC_CR2_CONT_BIT);
	#elif  MADC_REGULAR_CONVERSION_MODE == MADC_CONTINUOUS_CONVERSION
		CLR_BIT(ADC1->CR1, MADC_CR1_DISCEN_BIT);
 8000206:	4b21      	ldr	r3, [pc, #132]	; (800028c <MADC_vGeneralInit+0xb8>)
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	4a20      	ldr	r2, [pc, #128]	; (800028c <MADC_vGeneralInit+0xb8>)
 800020c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000210:	6053      	str	r3, [r2, #4]
		SET_BIT(ADC1->CR2, MADC_CR2_CONT_BIT);
 8000212:	4b1e      	ldr	r3, [pc, #120]	; (800028c <MADC_vGeneralInit+0xb8>)
 8000214:	689b      	ldr	r3, [r3, #8]
 8000216:	4a1d      	ldr	r2, [pc, #116]	; (800028c <MADC_vGeneralInit+0xb8>)
 8000218:	f043 0302 	orr.w	r3, r3, #2
 800021c:	6093      	str	r3, [r2, #8]
	/* Set the Conversion Mode of Injected Group */
	#if MADC_INJECTED_CONVERSION_MODE == MADC_NORMAL_CONVERSION
		CLR_BIT(ADC1->CR1, MADC_CR1_JDISCEN_BIT);
		CLR_BIT(ADC1->CR2, MADC_CR2_CONT_BIT);
	#elif  MADC_INJECTED_CONVERSION_MODE == MADC_CONTINUOUS_CONVERSION
		CLR_BIT(ADC1->CR1, MADC_CR1_JDISCEN_BIT);
 800021e:	4b1b      	ldr	r3, [pc, #108]	; (800028c <MADC_vGeneralInit+0xb8>)
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	4a1a      	ldr	r2, [pc, #104]	; (800028c <MADC_vGeneralInit+0xb8>)
 8000224:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000228:	6053      	str	r3, [r2, #4]
		SET_BIT(ADC1->CR2, MADC_CR2_CONT_BIT);
 800022a:	4b18      	ldr	r3, [pc, #96]	; (800028c <MADC_vGeneralInit+0xb8>)
 800022c:	689b      	ldr	r3, [r3, #8]
 800022e:	4a17      	ldr	r2, [pc, #92]	; (800028c <MADC_vGeneralInit+0xb8>)
 8000230:	f043 0302 	orr.w	r3, r3, #2
 8000234:	6093      	str	r3, [r2, #8]
		WRITE_BITS(ADC1->CR1, MADC_DISCONTINUOUS_LENGTH, THREE_BITS, MADC_CR1_DISCNUM0_BIT);
	#endif

	/* Set the Scanning Mode */
	#if MADC_SCANNING_MODE == MADC_SINGLE_CONVERSION_MODE
		CLR_BIT(ADC1->CR1, MADC_CR1_SCAN_BIT);
 8000236:	4b15      	ldr	r3, [pc, #84]	; (800028c <MADC_vGeneralInit+0xb8>)
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	4a14      	ldr	r2, [pc, #80]	; (800028c <MADC_vGeneralInit+0xb8>)
 800023c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000240:	6053      	str	r3, [r2, #4]
		/* Clear the EOC After Each Regular Conversion (BY DEFAULT IT IS SINGLE CONVERSION) */
		CLR_BIT(ADC1->CR2, MADC_CR2_EOCS_BIT);
 8000242:	4b12      	ldr	r3, [pc, #72]	; (800028c <MADC_vGeneralInit+0xb8>)
 8000244:	689b      	ldr	r3, [r3, #8]
 8000246:	4a11      	ldr	r2, [pc, #68]	; (800028c <MADC_vGeneralInit+0xb8>)
 8000248:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800024c:	6093      	str	r3, [r2, #8]

	#if MADC_REGULAR_EXTERNAL_TRIGGER == MADC_ENABLE
		WRITE_BITS(ADC1->CR2, MADC_REGULAR_EXTERNAL_TRIGGER_EDGE, TWO_BITS, MADC_CR2_EXTEN0_BIT);
		WRITE_BITS(ADC1->CR2, MADC_REGULAR_EXTERNAL_TRIGGER_SOURCE, FOUR_BITS, MADC_CR2_EXTSEL0_BIT);
	#else
		WRITE_BITS(ADC1->CR2, MADC_TRIG_EDGE_DISABLED, TWO_BITS, MADC_CR2_EXTEN0_BIT);
 800024e:	4b0f      	ldr	r3, [pc, #60]	; (800028c <MADC_vGeneralInit+0xb8>)
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	4a0e      	ldr	r2, [pc, #56]	; (800028c <MADC_vGeneralInit+0xb8>)
 8000254:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000258:	6093      	str	r3, [r2, #8]

	#if MADC_INJECTED_EXTERNAL_TRIGGER == MADC_ENABLE
		WRITE_BITS(ADC1->CR2, MADC_INJECTED_EXTERNAL_TRIGGER_EDGE, TWO_BITS, MADC_CR2_JEXTEN0_BIT);
		WRITE_BITS(ADC1->CR2, MADC_INJECTED_EXTERNAL_TRIGGER_SOURCE, FOUR_BITS, MADC_CR2_JEXTSEL0_BIT);
	#else
		WRITE_BITS(ADC1->CR2, MADC_TRIG_EDGE_DISABLED, TWO_BITS, MADC_CR2_JEXTEN0_BIT);
 800025a:	4b0c      	ldr	r3, [pc, #48]	; (800028c <MADC_vGeneralInit+0xb8>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	4a0b      	ldr	r2, [pc, #44]	; (800028c <MADC_vGeneralInit+0xb8>)
 8000260:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000264:	6093      	str	r3, [r2, #8]
	#endif

	/* Set Automatic Injection */
	if (MADC_AUTOMATIC_INJECTION == MADC_ENABLE) { SET_BIT(ADC1->CR1, MADC_CR1_JAUTO_BIT); }
	else										 { CLR_BIT(ADC1->CR1, MADC_CR1_JAUTO_BIT); }
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <MADC_vGeneralInit+0xb8>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	4a08      	ldr	r2, [pc, #32]	; (800028c <MADC_vGeneralInit+0xb8>)
 800026c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000270:	6053      	str	r3, [r2, #4]

	/* Set ADC to Power Down Mode */
	CLR_BIT(ADC1->CR2, MADC_CR2_ADON_BIT);
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <MADC_vGeneralInit+0xb8>)
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	4a05      	ldr	r2, [pc, #20]	; (800028c <MADC_vGeneralInit+0xb8>)
 8000278:	f023 0301 	bic.w	r3, r3, #1
 800027c:	6093      	str	r3, [r2, #8]
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	40015004 	.word	0x40015004
 800028c:	40012000 	.word	0x40012000

08000290 <MADC_vEnable>:
/* Func. Name: MADC_vEnable          */
/* i/p arguments: nothing            */
/* o/p arguments: nothing            */
/* Desc. : This API Wakes up the ADC */
/*************************************/
void MADC_vEnable(u8 Copy_u8EnableReg, u8 Copy_u8EnableInj) {
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	460a      	mov	r2, r1
 800029a:	71fb      	strb	r3, [r7, #7]
 800029c:	4613      	mov	r3, r2
 800029e:	71bb      	strb	r3, [r7, #6]
	/* Wake up ADC from Power Down Mode */
	SET_BIT(ADC1->CR2, MADC_CR2_ADON_BIT);
 80002a0:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MADC_vEnable+0x4c>)
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <MADC_vEnable+0x4c>)
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	6093      	str	r3, [r2, #8]
	if (Copy_u8EnableReg == MADC_ENABLE) {
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d105      	bne.n	80002be <MADC_vEnable+0x2e>
		SET_BIT(ADC1->CR2, MADC_CR2_SWSTART_BIT);
 80002b2:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <MADC_vEnable+0x4c>)
 80002b4:	689b      	ldr	r3, [r3, #8]
 80002b6:	4a09      	ldr	r2, [pc, #36]	; (80002dc <MADC_vEnable+0x4c>)
 80002b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002bc:	6093      	str	r3, [r2, #8]
	}
	if (Copy_u8EnableInj == MADC_ENABLE) {
 80002be:	79bb      	ldrb	r3, [r7, #6]
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d105      	bne.n	80002d0 <MADC_vEnable+0x40>
		SET_BIT(ADC1->CR2, MADC_CR2_JSWSTART_BIT);
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <MADC_vEnable+0x4c>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <MADC_vEnable+0x4c>)
 80002ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002ce:	6093      	str	r3, [r2, #8]
	}
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	40012000 	.word	0x40012000

080002e0 <MADC_vSetSequence>:
/* i/p arguments: Channel: MADC_CHANNEL<Number>		 	                            */
/* i/p arguments: Copy_u8SeqNumber: MADC_SEQUENCE_<Number>	                        */
/* o/p arguments: nothing                                                           */
/* Desc. : This API Sets the Selected Channel to be in a Specific Sequence Location */
/************************************************************************************/
void MADC_vSetSequence(u8 Copy_u8Group, MADC_CHANNEL Channel, u8 Copy_u8SeqNumber) {
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
 80002ea:	460b      	mov	r3, r1
 80002ec:	71bb      	strb	r3, [r7, #6]
 80002ee:	4613      	mov	r3, r2
 80002f0:	717b      	strb	r3, [r7, #5]
	if (Copy_u8Group == MADC_REGULAR_GROUP) {
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d150      	bne.n	800039a <MADC_vSetSequence+0xba>
		if (Copy_u8SeqNumber <= MADC_SEQUENCE_6) {
 80002f8:	797b      	ldrb	r3, [r7, #5]
 80002fa:	2b05      	cmp	r3, #5
 80002fc:	d816      	bhi.n	800032c <MADC_vSetSequence+0x4c>
			WRITE_BITS(ADC1->SQR[2], Channel, FIVE_BITS, Copy_u8SeqNumber * 5);
 80002fe:	79b9      	ldrb	r1, [r7, #6]
 8000300:	797a      	ldrb	r2, [r7, #5]
 8000302:	4613      	mov	r3, r2
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	4413      	add	r3, r2
 8000308:	fa01 f303 	lsl.w	r3, r1, r3
 800030c:	4618      	mov	r0, r3
 800030e:	4b31      	ldr	r3, [pc, #196]	; (80003d4 <MADC_vSetSequence+0xf4>)
 8000310:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000312:	797a      	ldrb	r2, [r7, #5]
 8000314:	4613      	mov	r3, r2
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	4413      	add	r3, r2
 800031a:	221f      	movs	r2, #31
 800031c:	fa02 f303 	lsl.w	r3, r2, r3
 8000320:	43db      	mvns	r3, r3
 8000322:	400b      	ands	r3, r1
 8000324:	4a2b      	ldr	r2, [pc, #172]	; (80003d4 <MADC_vSetSequence+0xf4>)
 8000326:	4303      	orrs	r3, r0
 8000328:	6353      	str	r3, [r2, #52]	; 0x34
			WRITE_BITS(ADC1->SQR[0], Channel, FIVE_BITS, (Copy_u8SeqNumber - MADC_SEQUENCE_13) * 5);
		}
	} else {
		WRITE_BITS(ADC1->JSQR, Channel, FIVE_BITS, Copy_u8SeqNumber * 5);
	}
}
 800032a:	e04c      	b.n	80003c6 <MADC_vSetSequence+0xe6>
		} else if (Copy_u8SeqNumber <= MADC_SEQUENCE_12) {
 800032c:	797b      	ldrb	r3, [r7, #5]
 800032e:	2b0b      	cmp	r3, #11
 8000330:	d818      	bhi.n	8000364 <MADC_vSetSequence+0x84>
			WRITE_BITS(ADC1->SQR[1], Channel, FIVE_BITS, (Copy_u8SeqNumber - MADC_SEQUENCE_7) * 5);
 8000332:	79b9      	ldrb	r1, [r7, #6]
 8000334:	797b      	ldrb	r3, [r7, #5]
 8000336:	1f9a      	subs	r2, r3, #6
 8000338:	4613      	mov	r3, r2
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	4413      	add	r3, r2
 800033e:	fa01 f303 	lsl.w	r3, r1, r3
 8000342:	4618      	mov	r0, r3
 8000344:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <MADC_vSetSequence+0xf4>)
 8000346:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000348:	797b      	ldrb	r3, [r7, #5]
 800034a:	1f9a      	subs	r2, r3, #6
 800034c:	4613      	mov	r3, r2
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	4413      	add	r3, r2
 8000352:	221f      	movs	r2, #31
 8000354:	fa02 f303 	lsl.w	r3, r2, r3
 8000358:	43db      	mvns	r3, r3
 800035a:	400b      	ands	r3, r1
 800035c:	4a1d      	ldr	r2, [pc, #116]	; (80003d4 <MADC_vSetSequence+0xf4>)
 800035e:	4303      	orrs	r3, r0
 8000360:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000362:	e030      	b.n	80003c6 <MADC_vSetSequence+0xe6>
			WRITE_BITS(ADC1->SQR[0], Channel, FIVE_BITS, (Copy_u8SeqNumber - MADC_SEQUENCE_13) * 5);
 8000364:	79b9      	ldrb	r1, [r7, #6]
 8000366:	797b      	ldrb	r3, [r7, #5]
 8000368:	f1a3 020c 	sub.w	r2, r3, #12
 800036c:	4613      	mov	r3, r2
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	4413      	add	r3, r2
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
 8000376:	4618      	mov	r0, r3
 8000378:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <MADC_vSetSequence+0xf4>)
 800037a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800037c:	797b      	ldrb	r3, [r7, #5]
 800037e:	f1a3 020c 	sub.w	r2, r3, #12
 8000382:	4613      	mov	r3, r2
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	4413      	add	r3, r2
 8000388:	221f      	movs	r2, #31
 800038a:	fa02 f303 	lsl.w	r3, r2, r3
 800038e:	43db      	mvns	r3, r3
 8000390:	400b      	ands	r3, r1
 8000392:	4a10      	ldr	r2, [pc, #64]	; (80003d4 <MADC_vSetSequence+0xf4>)
 8000394:	4303      	orrs	r3, r0
 8000396:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000398:	e015      	b.n	80003c6 <MADC_vSetSequence+0xe6>
		WRITE_BITS(ADC1->JSQR, Channel, FIVE_BITS, Copy_u8SeqNumber * 5);
 800039a:	79b9      	ldrb	r1, [r7, #6]
 800039c:	797a      	ldrb	r2, [r7, #5]
 800039e:	4613      	mov	r3, r2
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	4413      	add	r3, r2
 80003a4:	fa01 f303 	lsl.w	r3, r1, r3
 80003a8:	4618      	mov	r0, r3
 80003aa:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <MADC_vSetSequence+0xf4>)
 80003ac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80003ae:	797a      	ldrb	r2, [r7, #5]
 80003b0:	4613      	mov	r3, r2
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	4413      	add	r3, r2
 80003b6:	221f      	movs	r2, #31
 80003b8:	fa02 f303 	lsl.w	r3, r2, r3
 80003bc:	43db      	mvns	r3, r3
 80003be:	400b      	ands	r3, r1
 80003c0:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <MADC_vSetSequence+0xf4>)
 80003c2:	4303      	orrs	r3, r0
 80003c4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40012000 	.word	0x40012000

080003d8 <MADC_u16ReadSingleConversion>:
/* i/p arguments: nothing			                                           */
/* o/p arguments: nothing                                                      */
/* Desc. : This API Waits for ADC to convert, then Returns the Data            */
/* NOTE  : Use This Function Only if ADC is Working on Single Conversion Mode  */
/*******************************************************************************/
u16 MADC_u16ReadSingleConversion(void) {
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
	/* Wait for ADC to Finish Conversion */
	while (!GET_BIT(ADC1->SR, MADC_SR_EOC_BIT));
 80003dc:	bf00      	nop
 80003de:	4b07      	ldr	r3, [pc, #28]	; (80003fc <MADC_u16ReadSingleConversion+0x24>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f003 0302 	and.w	r3, r3, #2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d0f9      	beq.n	80003de <MADC_u16ReadSingleConversion+0x6>
	return (u16)ADC1->DR;
 80003ea:	4b04      	ldr	r3, [pc, #16]	; (80003fc <MADC_u16ReadSingleConversion+0x24>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	b29b      	uxth	r3, r3
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40012000 	.word	0x40012000

08000400 <MGPIO_vSetPinMode>:
/* i/p arguments: Copy_GPIOPin: MGPIO_PIN00 --> MGPIO_PIN15       */
/* i/p arguments: Copy_u8Mode: MGPIO_MODE_<Mode Type>             */
/* o/p arguments: nothing                                         */
/* Desc. : This API Allows User to Set the mode of a Specific Pin */
/******************************************************************/
void MGPIO_vSetPinMode(GPIO_t* GPIOx, MGPIO_PIN Copy_GPIOPin, u8 Copy_u8Mode) {
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	460b      	mov	r3, r1
 800040a:	70fb      	strb	r3, [r7, #3]
 800040c:	4613      	mov	r3, r2
 800040e:	70bb      	strb	r3, [r7, #2]
    /* i/p Validation */
    if (Copy_u8Mode > MGPIO_MODE_ANALOG) { return; /* Do Nothing */ }
 8000410:	78bb      	ldrb	r3, [r7, #2]
 8000412:	2b03      	cmp	r3, #3
 8000414:	d813      	bhi.n	800043e <MGPIO_vSetPinMode+0x3e>
    WRITE_BITS(GPIOx->MODER, Copy_u8Mode, TWO_BITS, Copy_GPIOPin * 2);
 8000416:	78ba      	ldrb	r2, [r7, #2]
 8000418:	78fb      	ldrb	r3, [r7, #3]
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	fa02 f303 	lsl.w	r3, r2, r3
 8000420:	4618      	mov	r0, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	2103      	movs	r1, #3
 800042c:	fa01 f303 	lsl.w	r3, r1, r3
 8000430:	43db      	mvns	r3, r3
 8000432:	4013      	ands	r3, r2
 8000434:	ea40 0203 	orr.w	r2, r0, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	e000      	b.n	8000440 <MGPIO_vSetPinMode+0x40>
    if (Copy_u8Mode > MGPIO_MODE_ANALOG) { return; /* Do Nothing */ }
 800043e:	bf00      	nop
}
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
	...

0800044c <MRCC_vInitSysAndBusClock>:
/* Func. Name: MRCC_vInitSysAndBusClock 						  */
/* i/p arguments: nothing              	   						  */
/* o/p arguments: nothing              							  */
/* Desc. : This API Initializes the The System CLK and Busses CLK */
/******************************************************************/
void MRCC_vInitSysAndBusClock() {
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
	#if MRCC_SYSTEM_CLOCK_SOURCE == MRCC_HSI_CLK_SOURCE
		/* Enable HSI */
		SET_BIT(RCC_CR, MRCC_CR_HSION_BIT);
 8000450:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <MRCC_vInitSysAndBusClock+0x6c>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a18      	ldr	r2, [pc, #96]	; (80004b8 <MRCC_vInitSysAndBusClock+0x6c>)
 8000456:	f043 0301 	orr.w	r3, r3, #1
 800045a:	6013      	str	r3, [r2, #0]
		/* Trim HSI */
		WRITE_BITS(RCC_CR, MRCC_HSI_TRIMMING, FIVE_BITS, MRCC_CR_HSITRIM_BIT);
 800045c:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <MRCC_vInitSysAndBusClock+0x6c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000464:	4a14      	ldr	r2, [pc, #80]	; (80004b8 <MRCC_vInitSysAndBusClock+0x6c>)
 8000466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800046a:	6013      	str	r3, [r2, #0]
		/* Switch System Clock to HSI */
		WRITE_BITS(RCC_CFGR, MRCC_SW_SWITCH_TO_HSI, TWO_BITS, MRCC_CFGR_SW_BIT);
 800046c:	4b13      	ldr	r3, [pc, #76]	; (80004bc <MRCC_vInitSysAndBusClock+0x70>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a12      	ldr	r2, [pc, #72]	; (80004bc <MRCC_vInitSysAndBusClock+0x70>)
 8000472:	f023 0303 	bic.w	r3, r3, #3
 8000476:	6013      	str	r3, [r2, #0]
		/* booling till HSI is Stable */
		while(!GET_BIT(RCC_CR, MRCC_CR_HSIRDY_BIT));
 8000478:	bf00      	nop
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MRCC_vInitSysAndBusClock+0x6c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f003 0302 	and.w	r3, r3, #2
 8000482:	2b00      	cmp	r3, #0
 8000484:	d0f9      	beq.n	800047a <MRCC_vInitSysAndBusClock+0x2e>
		while(!GET_BIT(RCC_CR, MRCC_CR_PLLRDY_BIT));
	#else
		#warning "Invalid Clock Source Configuration!"
	#endif
	/* Set the AHB Prescaler */
	WRITE_BITS(RCC_CFGR, MRCC_AHB_PRESCALER, FOUR_BITS, MRCC_CFGR_HPRE_BIT);
 8000486:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <MRCC_vInitSysAndBusClock+0x70>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800048e:	4a0b      	ldr	r2, [pc, #44]	; (80004bc <MRCC_vInitSysAndBusClock+0x70>)
 8000490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000494:	6013      	str	r3, [r2, #0]
	/* Set the APB1 Prescaler */
	WRITE_BITS(RCC_CFGR, MRCC_APB1_PRESCALER, THREE_BITS, MRCC_CFGR_PPRE1_BIT);
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <MRCC_vInitSysAndBusClock+0x70>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a08      	ldr	r2, [pc, #32]	; (80004bc <MRCC_vInitSysAndBusClock+0x70>)
 800049c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80004a0:	6013      	str	r3, [r2, #0]
	/* Set the APB2 Prescaler */
	WRITE_BITS(RCC_CFGR, MRCC_APB2_PRESCALER, THREE_BITS, MRCC_CFGR_PPRE2_BIT);
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <MRCC_vInitSysAndBusClock+0x70>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a05      	ldr	r2, [pc, #20]	; (80004bc <MRCC_vInitSysAndBusClock+0x70>)
 80004a8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80004ac:	6013      	str	r3, [r2, #0]
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	40023800 	.word	0x40023800
 80004bc:	40023808 	.word	0x40023808

080004c0 <MRCC_vEnablePeriphClock>:
/* i/p arguments: Copy_BusID: MRCC_BUS_AHB1 -->  MRCC_BUS_APB2LP             */
/* i/p arguments: Copy_PeriphID: <PeripheralName>EN || <PeripheralName>LPEN  */
/* o/p arguments: nothing                                                    */
/* Desc. : This API Allows the User to Enable CLK for a Specific Peripheral  */
/*****************************************************************************/
void MRCC_vEnablePeriphClock(MRCC_BUS Copy_BusID, MRCC_PeriphClock Copy_PeriphID) {
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	460a      	mov	r2, r1
 80004ca:	71fb      	strb	r3, [r7, #7]
 80004cc:	4613      	mov	r3, r2
 80004ce:	71bb      	strb	r3, [r7, #6]
	switch (Copy_BusID) {
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	2b07      	cmp	r3, #7
 80004d4:	d86a      	bhi.n	80005ac <MRCC_vEnablePeriphClock+0xec>
 80004d6:	a201      	add	r2, pc, #4	; (adr r2, 80004dc <MRCC_vEnablePeriphClock+0x1c>)
 80004d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004dc:	080004fd 	.word	0x080004fd
 80004e0:	08000513 	.word	0x08000513
 80004e4:	08000529 	.word	0x08000529
 80004e8:	0800053f 	.word	0x0800053f
 80004ec:	08000555 	.word	0x08000555
 80004f0:	0800056b 	.word	0x0800056b
 80004f4:	08000581 	.word	0x08000581
 80004f8:	08000597 	.word	0x08000597
		case MRCC_BUS_AHB1:   SET_BIT(RCC_AHB1ENR, Copy_PeriphID);   break;
 80004fc:	4b2f      	ldr	r3, [pc, #188]	; (80005bc <MRCC_vEnablePeriphClock+0xfc>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	79ba      	ldrb	r2, [r7, #6]
 8000502:	2101      	movs	r1, #1
 8000504:	fa01 f202 	lsl.w	r2, r1, r2
 8000508:	4611      	mov	r1, r2
 800050a:	4a2c      	ldr	r2, [pc, #176]	; (80005bc <MRCC_vEnablePeriphClock+0xfc>)
 800050c:	430b      	orrs	r3, r1
 800050e:	6013      	str	r3, [r2, #0]
 8000510:	e04d      	b.n	80005ae <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_AHB2:   SET_BIT(RCC_AHB2ENR, Copy_PeriphID);   break;
 8000512:	4b2b      	ldr	r3, [pc, #172]	; (80005c0 <MRCC_vEnablePeriphClock+0x100>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	79ba      	ldrb	r2, [r7, #6]
 8000518:	2101      	movs	r1, #1
 800051a:	fa01 f202 	lsl.w	r2, r1, r2
 800051e:	4611      	mov	r1, r2
 8000520:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <MRCC_vEnablePeriphClock+0x100>)
 8000522:	430b      	orrs	r3, r1
 8000524:	6013      	str	r3, [r2, #0]
 8000526:	e042      	b.n	80005ae <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB1:   SET_BIT(RCC_APB1ENR, Copy_PeriphID);   break;
 8000528:	4b26      	ldr	r3, [pc, #152]	; (80005c4 <MRCC_vEnablePeriphClock+0x104>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	79ba      	ldrb	r2, [r7, #6]
 800052e:	2101      	movs	r1, #1
 8000530:	fa01 f202 	lsl.w	r2, r1, r2
 8000534:	4611      	mov	r1, r2
 8000536:	4a23      	ldr	r2, [pc, #140]	; (80005c4 <MRCC_vEnablePeriphClock+0x104>)
 8000538:	430b      	orrs	r3, r1
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	e037      	b.n	80005ae <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB2:   SET_BIT(RCC_APB2ENR, Copy_PeriphID);   break;
 800053e:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <MRCC_vEnablePeriphClock+0x108>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	79ba      	ldrb	r2, [r7, #6]
 8000544:	2101      	movs	r1, #1
 8000546:	fa01 f202 	lsl.w	r2, r1, r2
 800054a:	4611      	mov	r1, r2
 800054c:	4a1e      	ldr	r2, [pc, #120]	; (80005c8 <MRCC_vEnablePeriphClock+0x108>)
 800054e:	430b      	orrs	r3, r1
 8000550:	6013      	str	r3, [r2, #0]
 8000552:	e02c      	b.n	80005ae <MRCC_vEnablePeriphClock+0xee>
		case MRCC_BUS_AHB1LP: SET_BIT(RCC_AHB1LPENR, Copy_PeriphID); break;
 8000554:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <MRCC_vEnablePeriphClock+0x10c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	79ba      	ldrb	r2, [r7, #6]
 800055a:	2101      	movs	r1, #1
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	4611      	mov	r1, r2
 8000562:	4a1a      	ldr	r2, [pc, #104]	; (80005cc <MRCC_vEnablePeriphClock+0x10c>)
 8000564:	430b      	orrs	r3, r1
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	e021      	b.n	80005ae <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_AHB2LP: SET_BIT(RCC_AHB2LPENR, Copy_PeriphID); break;
 800056a:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <MRCC_vEnablePeriphClock+0x110>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	79ba      	ldrb	r2, [r7, #6]
 8000570:	2101      	movs	r1, #1
 8000572:	fa01 f202 	lsl.w	r2, r1, r2
 8000576:	4611      	mov	r1, r2
 8000578:	4a15      	ldr	r2, [pc, #84]	; (80005d0 <MRCC_vEnablePeriphClock+0x110>)
 800057a:	430b      	orrs	r3, r1
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	e016      	b.n	80005ae <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB1LP: SET_BIT(RCC_APB1LPENR, Copy_PeriphID); break;
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MRCC_vEnablePeriphClock+0x114>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	79ba      	ldrb	r2, [r7, #6]
 8000586:	2101      	movs	r1, #1
 8000588:	fa01 f202 	lsl.w	r2, r1, r2
 800058c:	4611      	mov	r1, r2
 800058e:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <MRCC_vEnablePeriphClock+0x114>)
 8000590:	430b      	orrs	r3, r1
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	e00b      	b.n	80005ae <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB2LP: SET_BIT(RCC_APB2LPENR, Copy_PeriphID); break;
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <MRCC_vEnablePeriphClock+0x118>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	79ba      	ldrb	r2, [r7, #6]
 800059c:	2101      	movs	r1, #1
 800059e:	fa01 f202 	lsl.w	r2, r1, r2
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a0c      	ldr	r2, [pc, #48]	; (80005d8 <MRCC_vEnablePeriphClock+0x118>)
 80005a6:	430b      	orrs	r3, r1
 80005a8:	6013      	str	r3, [r2, #0]
 80005aa:	e000      	b.n	80005ae <MRCC_vEnablePeriphClock+0xee>
        default: break;
 80005ac:	bf00      	nop
    }
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40023830 	.word	0x40023830
 80005c0:	40023834 	.word	0x40023834
 80005c4:	40023840 	.word	0x40023840
 80005c8:	40023844 	.word	0x40023844
 80005cc:	40023850 	.word	0x40023850
 80005d0:	40023854 	.word	0x40023854
 80005d4:	40023860 	.word	0x40023860
 80005d8:	40023864 	.word	0x40023864

080005dc <SysTick_Handler>:
/* Func. Name: SysTick_Handler           */
/* i/p arguments: nothing                */
/* o/p arguments: nothing                */
/* Desc. : This API is SysTick Interrupt */
/*****************************************/
void SysTick_Handler() {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
    if (Global_u8CallMode == MSTK_SINGLE_CALL_MODE) {
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <SysTick_Handler+0x48>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d111      	bne.n	800060c <SysTick_Handler+0x30>
        /* Disable INT */
        CLR_BIT(STK_CTRL,MSTK_CTRL_TICKINT_BIT);
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <SysTick_Handler+0x4c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <SysTick_Handler+0x4c>)
 80005ee:	f023 0302 	bic.w	r3, r3, #2
 80005f2:	6013      	str	r3, [r2, #0]
        /* Stop the Timer */
        CLR_BIT(STK_CTRL,MSTK_CTRL_ENABLE_BIT);
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <SysTick_Handler+0x4c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <SysTick_Handler+0x4c>)
 80005fa:	f023 0301 	bic.w	r3, r3, #1
 80005fe:	6013      	str	r3, [r2, #0]
        STK_LOAD = 0;
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <SysTick_Handler+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
        STK_VAL = 0;
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <SysTick_Handler+0x54>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
    }
    if (MSTK_CallBack != NULL) { MSTK_CallBack(); }
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <SysTick_Handler+0x58>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d002      	beq.n	800061a <SysTick_Handler+0x3e>
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <SysTick_Handler+0x58>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4798      	blx	r3
    /* Clear Flag */
    (void)GET_BIT(STK_CTRL,MSTK_CTRL_COUNTFLAG_BIT);
 800061a:	4b03      	ldr	r3, [pc, #12]	; (8000628 <SysTick_Handler+0x4c>)
 800061c:	681b      	ldr	r3, [r3, #0]
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000020 	.word	0x20000020
 8000628:	e000e010 	.word	0xe000e010
 800062c:	e000e014 	.word	0xe000e014
 8000630:	e000e018 	.word	0xe000e018
 8000634:	2000001c 	.word	0x2000001c

08000638 <USART1_IRQHandler>:
{ MUSART2_CallBack = ptr; }
void MUSART6_vSetCallBack(void (*ptr)(void))
{ MUSART6_CallBack = ptr; }


void USART1_IRQHandler(void) {
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	USART1->SR = 0;
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <USART1_IRQHandler+0x14>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
	MUSART1_CallBack();
 8000642:	4b03      	ldr	r3, [pc, #12]	; (8000650 <USART1_IRQHandler+0x18>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4798      	blx	r3
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40011000 	.word	0x40011000
 8000650:	20000024 	.word	0x20000024

08000654 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	USART2->SR = 0 ;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <USART2_IRQHandler+0x14>)
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
	MUSART2_CallBack();
 800065e:	4b03      	ldr	r3, [pc, #12]	; (800066c <USART2_IRQHandler+0x18>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4798      	blx	r3
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40004400 	.word	0x40004400
 800066c:	20000028 	.word	0x20000028

08000670 <USART6_IRQHandler>:

void USART6_IRQHandler(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	USART6->SR = 0 ;
 8000674:	4b03      	ldr	r3, [pc, #12]	; (8000684 <USART6_IRQHandler+0x14>)
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
	MUSART6_CallBack();
 800067a:	4b03      	ldr	r3, [pc, #12]	; (8000688 <USART6_IRQHandler+0x18>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4798      	blx	r3
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40011400 	.word	0x40011400
 8000688:	2000002c 	.word	0x2000002c

0800068c <APP_vInit>:
#include "MGPIO_Interface.h"
#include "MUSART_Interface.h"
#include "MADC_Interface.h"


void APP_vInit(void) {
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	/* CLOCK CONFIGURATION */
	MRCC_vInitSysAndBusClock();
 8000690:	f7ff fedc 	bl	800044c <MRCC_vInitSysAndBusClock>
	/* CLOCK BUSSES ENABLE */
	MRCC_vEnablePeriphClock(MRCC_BUS_AHB1, MRCC_AHB1_GPIOAEN);
 8000694:	2100      	movs	r1, #0
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff ff12 	bl	80004c0 <MRCC_vEnablePeriphClock>
	MRCC_vEnablePeriphClock(MRCC_BUS_APB2, MRCC_APB2_USART1EN);
 800069c:	2104      	movs	r1, #4
 800069e:	2003      	movs	r0, #3
 80006a0:	f7ff ff0e 	bl	80004c0 <MRCC_vEnablePeriphClock>
	MRCC_vEnablePeriphClock(MRCC_BUS_APB2, MRCC_APB2_ADC1EN);
 80006a4:	2108      	movs	r1, #8
 80006a6:	2003      	movs	r0, #3
 80006a8:	f7ff ff0a 	bl	80004c0 <MRCC_vEnablePeriphClock>
	/* PIN CONFIGURATION */
	MGPIO_vSetPinMode(GPIOA, MGPIO_PIN00, MGPIO_MODE_ANALOG);
 80006ac:	2203      	movs	r2, #3
 80006ae:	2100      	movs	r1, #0
 80006b0:	4807      	ldr	r0, [pc, #28]	; (80006d0 <APP_vInit+0x44>)
 80006b2:	f7ff fea5 	bl	8000400 <MGPIO_vSetPinMode>
	/* ADC CONFIGURATION */
	MADC_vGeneralInit();
 80006b6:	f7ff fd8d 	bl	80001d4 <MADC_vGeneralInit>
	MADC_vSetSequence(MADC_REGULAR_GROUP, MADC_CHANNEL0, MADC_SEQUENCE_1);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff fe0e 	bl	80002e0 <MADC_vSetSequence>
	MADC_vEnable(MADC_ENABLE, MADC_DISABLE);
 80006c4:	2100      	movs	r1, #0
 80006c6:	2001      	movs	r0, #1
 80006c8:	f7ff fde2 	bl	8000290 <MADC_vEnable>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40020000 	.word	0x40020000

080006d4 <main>:

int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	APP_vInit();
 80006da:	f7ff ffd7 	bl	800068c <APP_vInit>
    /* Loop forever */
	u16 APP_u16READ = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	80fb      	strh	r3, [r7, #6]
	for(;;) {
		APP_u16READ = MADC_u16ReadSingleConversion();
 80006e2:	f7ff fe79 	bl	80003d8 <MADC_u16ReadSingleConversion>
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
 80006ea:	e7fa      	b.n	80006e2 <main+0xe>

080006ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ec:	480d      	ldr	r0, [pc, #52]	; (8000724 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <LoopForever+0x6>)
  ldr r1, =_edata
 80006f6:	490d      	ldr	r1, [pc, #52]	; (800072c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f8:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <LoopForever+0xe>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006fc:	e002      	b.n	8000704 <LoopCopyDataInit>

080006fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000702:	3304      	adds	r3, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000708:	d3f9      	bcc.n	80006fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <LoopForever+0x12>)
  ldr r4, =_ebss
 800070c:	4c0a      	ldr	r4, [pc, #40]	; (8000738 <LoopForever+0x16>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000710:	e001      	b.n	8000716 <LoopFillZerobss>

08000712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000714:	3204      	adds	r2, #4

08000716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000718:	d3fb      	bcc.n	8000712 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800071a:	f000 f811 	bl	8000740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071e:	f7ff ffd9 	bl	80006d4 <main>

08000722 <LoopForever>:

LoopForever:
  b LoopForever
 8000722:	e7fe      	b.n	8000722 <LoopForever>
  ldr   r0, =_estack
 8000724:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800072c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000730:	080007a8 	.word	0x080007a8
  ldr r2, =_sbss
 8000734:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000738:	20000030 	.word	0x20000030

0800073c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC_IRQHandler>
	...

08000740 <__libc_init_array>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	4d0d      	ldr	r5, [pc, #52]	; (8000778 <__libc_init_array+0x38>)
 8000744:	4c0d      	ldr	r4, [pc, #52]	; (800077c <__libc_init_array+0x3c>)
 8000746:	1b64      	subs	r4, r4, r5
 8000748:	10a4      	asrs	r4, r4, #2
 800074a:	2600      	movs	r6, #0
 800074c:	42a6      	cmp	r6, r4
 800074e:	d109      	bne.n	8000764 <__libc_init_array+0x24>
 8000750:	4d0b      	ldr	r5, [pc, #44]	; (8000780 <__libc_init_array+0x40>)
 8000752:	4c0c      	ldr	r4, [pc, #48]	; (8000784 <__libc_init_array+0x44>)
 8000754:	f000 f818 	bl	8000788 <_init>
 8000758:	1b64      	subs	r4, r4, r5
 800075a:	10a4      	asrs	r4, r4, #2
 800075c:	2600      	movs	r6, #0
 800075e:	42a6      	cmp	r6, r4
 8000760:	d105      	bne.n	800076e <__libc_init_array+0x2e>
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f855 3b04 	ldr.w	r3, [r5], #4
 8000768:	4798      	blx	r3
 800076a:	3601      	adds	r6, #1
 800076c:	e7ee      	b.n	800074c <__libc_init_array+0xc>
 800076e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000772:	4798      	blx	r3
 8000774:	3601      	adds	r6, #1
 8000776:	e7f2      	b.n	800075e <__libc_init_array+0x1e>
 8000778:	080007a0 	.word	0x080007a0
 800077c:	080007a0 	.word	0x080007a0
 8000780:	080007a0 	.word	0x080007a0
 8000784:	080007a4 	.word	0x080007a4

08000788 <_init>:
 8000788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078a:	bf00      	nop
 800078c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800078e:	bc08      	pop	{r3}
 8000790:	469e      	mov	lr, r3
 8000792:	4770      	bx	lr

08000794 <_fini>:
 8000794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000796:	bf00      	nop
 8000798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800079a:	bc08      	pop	{r3}
 800079c:	469e      	mov	lr, r3
 800079e:	4770      	bx	lr
